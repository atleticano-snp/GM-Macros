{"name":"Ki-Macro","type":"script","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/yellow_13.jpg","scope":"global","command":"/**\n * Monk Ki Point spender\n * \n * This macro will prompt which Feature you want to spend Ki points on.\n * \n * Flurry of Blows: Automatically cast two Unarmed Strike's\n * Stunning Strike: Automatically show the saving throw DC\n * Deflect Missiles: Automatically show the damage reduction\n */\n(async () => {\n    const kiName = \"Ki Points\";\n    const errNoMonkToken = \"Please select a single monk token.\";\n\n    const sendChat = async (msg) => {\n        let chatData = {\n            user: game.user.id,\n            speaker: ChatMessage.getSpeaker(),\n            content: msg,\n        };\n        ChatMessage.create(chatData, {});\n    }\n\n    if (!actor) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monk = actor.items.find(i => i.name === 'Monk' && i.type === 'class');\n    if (!monk) {\n        ui.notifications.warn(errNoMonkToken);\n        return\n    }\n\n    let monkLevels = monk.data.data.levels || 20;\n    //let subClass = monk.data.data.subclass;\n\n    if (monkLevels < 2) {\n        ui.notifications.warn('You must have a least 2 Monk levels to use ki points.');\n        return\n    }\n\n    class KiFeature {\n        /**\n         * @param {string} name\n         * @param {string} fallbackText\n         * @param {number} requireLevel\n         * @param {function} action\n         * @param {function} appendTemplate\n         * @param {number} kiCost\n         */\n        constructor(name, fallbackText, requireLevel, action, appendTemplate, kiCost) {\n            this.name = name;\n            this.fallbackText = fallbackText;\n            this.requireLevel = requireLevel;\n            this.kiCost = kiCost || 1;\n            if (action) {\n                this.action = action;\n            }\n            if (appendTemplate) {\n                this.appendTemplate = appendTemplate;\n            }\n        }\n\n        render(allowHigher) {\n            let entry = null;\n\n            const pack = game.packs.get(\"dnd5e.classfeatures\");\n            if (!pack) {\n                console.warn('Could not find \"dnd5e.classfeatures\" compendium.');\n            } else {\n                entry = pack.index.find(e => e.name === this.name);\n            }\n\n            if (!allowHigher && this.requireLevel && monkLevels && this.requireLevel > monkLevels) {\n                ui.notifications.warn(`You need to have ${this.requireLevel} monk levels, you only have ${monkLevels}.`)\n                return\n            }\n\n            if (entry) {\n                pack.getEntity(entry._id).then(o => {\n                    let template = `@Compendium[dnd5e.classfeatures.${entry._id}]{${this.name}}\n                    ${o.data.data.description.value}`;\n                    if (this.appendTemplate) {\n                        template += '\\n\\n' + this.appendTemplate();\n                    }\n                    sendChat(template);\n                    if (this.action) {\n                        this.action();\n                    }\n                });\n            } else {\n                console.warn(`Could not find \"${this.name}\" entry in compendium.`);\n                let template = this.fallbackText;\n                if (this.appendTemplate) {\n                    template += '\\n\\n' + this.appendTemplate();\n                }\n                sendChat(template);\n                if (this.action) {\n                    this.action();\n                }\n            }\n        }\n    }\n\n   const openHand = !!actor.items.find(o => o.data.name === 'Open Hand Technique') ? `<br />In addition, you can impose one of the following: <ul><li>It must succeed on a <b>Dexterity</b> saving throw or be knocked prone.</li><li>It must make a <b>Strength</b> saving throw. If it fails, you can push it up to 15 feet away from you.</li><li>It can’t take reactions until the end of your next turn.</li></ul> Saving throw <b>DC ${10 + actor.data.data.abilities.wis.mod}</b>` : \"\";\n\n    const features = [\n        new KiFeature(\"Ki: Flurry of Blows\",\n            `Immediately after you take the <b>Attack</b> action on your turn, you can spend 1 ki point to make two unarmed strikes as a bonus action. ${openHand}`,\n            2,\n            function () {\n                // Automatically roll two Unarmed Strike attacks\n                let strike = actor.items.find(o => o.data.name === 'Unarmed Strike' && o.data.labels.activation === '1 Action')\n                if (strike) {\n                    strike.roll();\n                    strike.roll();\n                }\n            }),\n        new KiFeature(\"Ki: Patient Defense\",\n            \"You can spend 1 ki point to take the <b>Dodge</b> action as a bonus action on your turn.\",\n            2),\n        new KiFeature(\"Ki: Step of the Wind\",\n            \"You can spend 1 ki point to take the <b>Disengage</b> or <b>Dash</b> action as a bonus action on your turn, and your jump distance is doubled for the turn.\",\n            2),\n        new KiFeature(\"Deflect Missiles\",\n            `Starting at 3rd level, you can use your reaction to deflect or catch the missile when you are hit by a ranged weapon attack. When you do so, the damage you take from the attack is reduced by 1d10 + your Dexterity modifier + your monk level. <br />\n        If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in one hand and you have at least one hand free. If you catch a missile in this way, you can spend 1 ki point to make a ranged attack with the weapon or piece of ammunition you just caught, as part of the same reaction. You make this attack with proficiency, regardless of your weapon proficiencies, and the missile counts as a monk weapon for the attack, which has a normal range of 20 feet and a long range of 60 feet.`,\n            3,\n            null,\n            function () {\n                return `Damage reduction: [[/r 1d10+${actor.data.data.abilities.dex.mod}+${monkLevels}]]`;\n            }),\n        new KiFeature(\"Ki: Stunning Strike\",\n            \"Starting at 5th level, you can interfere with the flow of ki in an opponent’s body. When you hit another creature with a melee weapon attack, you can spend 1 ki point to attempt a stunning strike. The target must succeed on a Constitution saving throw or be <b>stunned</b> until the end of your next turn.\",\n            5,\n            null,\n            function () {\n                // Append the saving throw DC to the chat message\n                return `CON saving throw (DC [[8+${actor.data.data.abilities.wis.mod}+@attributes.prof]])`;\n            }),\n        new KiFeature(\"Ki: Diamond Soul\",\n            `Beginning at 14th level, your mastery of ki grants you proficiency in all saving throws.\n        Additionally, whenever you make a saving throw and fail, you can spend 1 ki point to reroll it and take the second result.`,\n            14),\n        new KiFeature(\"Ki: Empty Body\",\n            `Beginning at 18th level, you can use your action to spend 4 ki points to become invisible for 1 minute. During that time, you also have resistance to all damage but force damage.\n        Additionally, you can spend 8 ki points to cast the astral projection spell, without needing material components. When you do so, you can’t take any other creatures with you.`,\n            18,\n            null,\n            function () {\n                return \"Note: 4 ki points have been spent. Adjust manually if casting astral projection spell.\";\n            },\n            4),\n    ];\n\n    const consumeKi = (feature, allowNegative, allowHigher) => {\n        let hasAvailableResource = false;\n        let selected = features.find(o => o.name == feature);\n        let kiCost = selected.kiCost || 1;\n\n        // Look for Resources under the Core actor data\n        let resourceKey = Object.keys(actor.data.data.resources).filter(k => actor.data.data.resources[k].label === kiName).shift();\n        if (resourceKey && (actor.data.data.resources[resourceKey].value >= kiCost || allowNegative)) {\n            hasAvailableResource = true;\n            actor.data.data.resources[resourceKey].value -= kiCost;\n        }\n\n        // Look for Ki Points Feat that has uses\n        actor.items.filter(i => i.data.name === kiName && i.data.hasUses && (i.data.data.uses.value >= kiCost || allowNegative)).forEach(i => {\n            hasAvailableResource = true;\n            i.data.data.uses.value -= kiCost\n        })\n\n        if (!hasAvailableResource) {\n            ui.notifications.warn(`${actor.name} does not have any ${kiName} left!`);\n            return false;\n        }\n        if (actor.sheet.rendered) {\n            // Update the actor sheet if it is currently open\n            actor.render(true);\n        }\n\n        if (selected) {\n            selected.render(allowHigher);\n        }\n\n        return true;\n    };\n\n    (async () => {\n        let template = `\n        <form>\n            <div class=\"form-group\">\n                <label>Select feature:</label>\n                <select id=\"feature\" name=\"feature\">`\n        features.filter(o => o.requireLevel <= monkLevels).forEach(o => {\n            template += `<option value=\"${o.name}\">${o.name}</option>`;\n        });\n        template += `</select>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki into negative? <input type=\"checkbox\" id=\"allow-negative\" name=\"allow-negative\" value=\"1\"></label>\n            </div>\n            <div class=\"form-group\">\n                <label>Allow consuming Ki feats of higher level? <input type=\"checkbox\" id=\"allow-higher\" name=\"allow-higher\" value=\"1\"></label>\n            </div>\n        </form>`;\n        new Dialog({\n            title: `Monk Ki Point Spender`,\n            content: template,\n            buttons: {\n                yes: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: `Apply`,\n                    callback: (html) => {\n                        let feature = html.find('#feature')[0].value;\n                        let allowNegative = html.find('#allow-negative')[0].checked;\n                        let allowHigher = html.find('#allow-higher')[0].checked;\n                        consumeKi(feature, allowNegative, allowHigher);\n                    }\n                },\n                no: {\n                    icon: \"<i class='fas fa-times'></i>\",\n                    label: `Cancel`\n                },\n            },\n            default: \"yes\"\n        }).render(true);\n    })();\n})()","folder":null,"sort":0,"permission":{"default":0,"NeG597KOgANJAOdY":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.f9MlCCl5Km4bw9Tp"}},"_id":"2nWZe70iZ2uIuj25"}
{"name":"Sneak Attack-Liga/Desliga","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/violet_27.jpg","tooltip":"Sneak Attack","colour":"#5945bf","trigger":""},"markers":{"markers":{"7rVA5gxptaEoIlko":false},"type":"Token"}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.hqzyhAjIeRfEca6K"}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is heavily based on the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 created and is maintaining this macro.\n//\n//\t\t\t\t\t\tUpdates:\t1.\t2020/06/05: Initial version.\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBonus Tip: Sneak Attack as a Condition                                                                                                                       \n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Sneaky\" with the same icon \t\t\t   \n//!!!\tas the optional sneak attack icon overlay, 'icons/svg/mystery-man-black.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   OPTIONAL TOKEN ICON-\tOn by default. If a path to a sneak attack icon is defined, it displays like a condition on the sneaking rogue.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst sneakIconPath = 'systems/dnd5e/icons/skills/violet_27.jpg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on whether the rogue is currently sneaking. \n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY. \n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one rogue using this feature at a time.\n\n\t\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\t\tconst toggleMacro = false;\n\n\t\t\t\t//To use a different icon, manually change the filepath here\n\t\t\t\tconst stopSneakIconPath = 'icons/svg/cowled.svg';\n\n\t\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\t\tconst sneakMacroName = 'Sneak Attack';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nlet toggleResult = false;\nlet enabled = false;\nlet errorReason = '';\nlet sneakAttack = {};\nlet rogue = {};\nlet rogueLvls = 0;\nlet sneakDice = 0;\nlet chatMsg = '';\nlet oldMDmg = '';\nlet oldRDmg = '';\n\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tBASIC LOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\t\tSets error messages as constants also for easier translation.\n\n\t\t\t\tconst rogueClassName = 'Rogue';\n\t\t\t\tconst sneakAttackFeatureName = 'Sneak Attack';\n\n\t\t\t\tconst errorSelectRogue = 'Please select a single rogue token.';\n\t\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Sneak attack toggle successful but unable to alter macro.';\n\t\t\t\tconst errorSelectToken = 'Please select a token.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//check to ensure token is selected and attempt to define the sneak attack feature\nif (macroActor !== null && macroActor !== undefined) {\n\tsneakAttack = macroActor.items.find(i => i.name == `${sneakAttackFeatureName}`);\n} else {\nerrorReason = `${errorSelectToken}`;\n}\n\n//check to ensure token is a rogue\nif (errorReason == '' && macroActor.items.find(i => i.name == `${rogueClassName}`) !== undefined) {\n\trogue = macroActor.items.find(i => i.name == `${rogueClassName}`);\n} else {\n\terrorReason = `${errorSelectRogue}`;\n}\n\nconsole.log(`Error reason is: ${errorReason}`);\n//main execution now that errors are caught\n\nif (errorReason == '') {\n\t\n\tchatMsg = '';\n\tlet enabled = false;\n\t// store the state of the sneak attack toggle in flags\n\tif (macroActor.data.flags.sneakMacro !== null && macroActor.data.flags.sneakMacro !== undefined) {\n\t\tenabled = true;\n\t}\n\t\n\t// if sneak attack is active, disable it\n\tif (enabled) {\n\t\tchatMsg = `${macroActor.name} is no longer sneak attacking.`;\n\t\t// ranged and melee weapon attack bonus\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro'] = null;\t\t\n\t\tobj['data.bonuses.mwak.damage'] = macroActor.data.flags.sneakMacro.oldMDmg;\t\t\t\n\t\tobj['data.bonuses.rwak.damage'] = macroActor.data.flags.sneakMacro.oldRDmg;\t\n\t\tmacroActor.update(obj);\n\t\t\n\t// if sneak attack is disabled, enable it\n\t} else {\t\t\n\t\tchatMsg = `${macroActor.name} starts sneak attacking!`;\n\t\t\n\t\tlet obj = {};\n\t\tobj['flags.sneakMacro.enabled'] = true;\n\n\t\t// Preserve old mwak damage bonus if there was one\n\t\tlet oldMDmg = macroActor.data.data.bonuses.mwak.damage;\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '') oldMDmg = 0;\n\t\tobj['flags.sneakMacro.oldMDmg'] = JSON.parse(JSON.stringify(oldMDmg));\n\n\t\t// Preserve old rwak damage bonus if there was one\n\t\tlet oldRDmg = macroActor.data.data.bonuses.rwak.damage;\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '') oldRDmg = 0;\n\t\tobj['flags.sneakMacro.oldRDmg'] = JSON.parse(JSON.stringify(oldRDmg));\n\n\t\t\n\t\t// Determining the rogue level\n\t\trogueLvls = rogue.data.data.levels;\n\n\t\t// Formula to determine the sneak attack damage depending on rogue level\t\n\t\tsneakDice = Math.ceil(rogueLvls/2);\n\t\n\t\t//actually add the bonus sneak attack damage to the previous bonus damage\n\t\t//respect roll formulas if present.\n\t\tif (oldMDmg==null || oldMDmg == undefined || oldMDmg == '' || oldMDmg == 0) {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.mwak.damage'] = `${oldMDmg} + ${sneakDice}d6`;\n\t\t}\n\n\t\tif (oldRDmg==null || oldRDmg == undefined || oldRDmg == '' || oldRDmg == 0) {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${sneakDice}d6`;\n\t\t} else {\n\t\t\tobj['data.bonuses.rwak.damage'] = `${oldRDmg} + ${sneakDice}d6`;\n\t\t}\t\n\n\t\tmacroActor.update(obj);\n\n\t}\t\n\t\n\t//mark or unmark character's token with Sneaky effect icon, if sneakIconPath is defined\n\t(async () => { \n\t\ttoggleResult = await macroToken.toggleEffect(sneakIconPath);\n\t\tif (toggleResult == enabled) macroToken.toggleEffect(sneakIconPath);  \n\t})();\n\n\t//toggle macro icon and name, if enabled\n\tif (toggleMacro) {\n//\t\tNorc's preferred icons, not sure if publicly available\n//\t\tsneakyMacroImgPath = 'systems/dnd5e/icons/skills/shadow_17.jpg';\n//\t\tstopSneakIconPath = 'systems/dnd5e/icons/skills/yellow_11.jpg';\n\t\tlet sneakMacro = game.macros.getName(sneakMacroName);\n\t\t\t//Also check for name of macro in its \"off\" form\n\t\t\tif (sneakMacro == null || sneakMacro == undefined) {\n\t\t\t\tsneakMacro = game.macros.getName('Stop ' + sneakMacroName);\n\t\t\t}\n\t\tlet obj = {};\n\t\tif ( (sneakMacro !== null && sneakMacro !== undefined) && \n\t\t\t\t+ (stopSneakIconPath !== null && stopSneakIconPath !== undefined && stopSneakIconPath !== '') ) {\n\t\t\tif (enabled) {\n\t\t\tobj['img'] = sneakIconPath;\n\t\t\tobj['name'] = sneakMacroName;\n\t\t\t} else {\n\t\t\tobj['img'] = stopSneakIconPath;\n\t\t\tobj['name'] = 'Stop ' + sneakMacroName;\n\t\t\t}\n\t\t\tsneakMacro.update(obj);\n\t\t} else {\n\t\tui.notifications.warn(`${sneakMacroName} ${warnMacroNotFound}`);\t\t\t\n\t\t}\n\t}\n\n} else {\nui.notifications.error(`${errorReason}`);\t\n}\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\nif (token)\n  MacroMarker.toggle(this, { entity: token });","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/violet_27.jpg","actorIds":[],"_id":"9J8wIqeIwOW76LOq"}
{"name":"Sorcerer point macro","type":"script","author":"05k4ub2VgC3VLxAg","img":"systems/dnd5e/icons/skills/nature_07.jpg","scope":"global","command":"/*\n  Sorcery Point Macro\n  Requirements : \n    1. Character or Token must possess \n      A. A level in \"Sorcerer\"\n      B. Item named \"Font of Magic\"\n      C. Optional : Items appropriately named for Specific Metamagics\n*/\n\nlet log = (...args) => console.log(\"Sorcery Point Macro | \", ...args);\nlet wait = async (ms) => new Promise((resolve)=> setTimeout(resolve, ms));\nlet macroActor = character !== null ? character : token.actor;\nlet data = { items : [], spellSlots : [], sorcPoints : {}, cost : [2,3,5,6,7], spellDiff : false, pointDiff : false};\nlet display_message = true;\nlet dialog_id = randomID();\n\n(async ()=>{\n  await dataCheck();\n\n  log(data);\n\n  updateDialog();\n})();\n\n  //execute choice\n\n  //display choice (if the user wants it)\n\n\nasync function dataCheck()\n{\n  let items = [\n    \"Sorcerer\", \n    \"Font of Magic\", \n    \"Metamagic: Careful Spell\", \n    \"Metamagic: Distant Spell\", \n    \"Metamagic: Empowered Spell\", \n    \"Metamagic: Extended Spell\", \n    \"Metamagic: Heightened Spell\", \n    \"Metamagic: Quickened Spell\", \n    \"Metamagic: Subtle Spell\", \n    \"Metamagic: Twinned Spell\"\n  ];\n\n  if(!macroActor) return error(`No Actor Selected (Character or Token)`);\n\n  items.forEach(name =>{\n    let item = macroActor.items.getName(name);\n\n    if(!item) data.items.push({_id : null, name });\n    else data.items.push({_id : item.id, name});\n  });\n\n  Object.entries(macroActor.data.data.spells).filter(([key, value])=> key !== `spell0`).forEach(([key, {value, max}])=>{\n\t\tdata.spellSlots.push({ slot : key === `pact` ? key : parseInt(key.charAt(5)), value, max });\n  });\n\n  if(!checkAction(`Sorcerer`)) return error(`${macroActor.name} does not have a level in Sorcerer`);\n  if(!checkAction(`Font of Magic`)) return error(`${macroActor.name} does not have the Font of Magic item/feature.`);\n\n  await fixFont();\n\n  async function fixFont()\n  {\n    let font = macroActor.items.getName(\"Font of Magic\");\n    let { levels } = macroActor.items.getName(\"Sorcerer\").data.data;\n    let { uses } = font.data.data;\n\n    if(uses.max !== levels)\n    {\n      let difference = levels - uses.max;\n      uses.max = levels;\n      uses.value = levels - difference;\n      await font.update({ \"data.uses\" : uses });\n    }\n\t\tdata.sorcPoints = uses.value !== null ? uses : {...uses, value : 0 };\n\t\t\n\t\tlog(data.sorcPoints);\n  }\n}\nfunction checkSlotsAvailable()\n{\n  return data.spellSlots.reduce((acc, val) => val.value > 0 || acc, false);\n}\nfunction checkSlotsMissing()\n{\n  return data.spellSlots.reduce((acc, val) => val.value !== val.max || acc, false);\n}\nfunction error(message)\n{\n  ui.notifications.error(message);\n  return new Error(message);\n}\nasync function updateDialog()\n{\n  let interval, content, buttons, dialog, interval_time, last_action;\n  \n  interval_time = 0.2;\n\n  content = getContent();\n\tbuttons = { Cancel : { label : `Cancel` }, Ok : { label : `Ok`, callback : (html) => { executeHTML(html); }}};\n  dialog = new Dialog({ title : `Sorcerer Point Macro`, content, buttons, close : ()=> { clearInterval(interval); }}).render(true);\n\n  interval = setInterval(()=>{\n\t\tlet {action} = getHTML();\n    if(last_action !== action)\n    {\n      last_action = action;\n      update();\n    }\n  }, interval_time * 1000);\n\n  function getContent()\n  {\n    return `\n    <div style=\"display:flex; flex-direction:column;\">\n      <div style=\"display:flex; flex-direction:row; justify-content:space-between; align-items:center; flex-grow:2;\">\n        <img style=\"flex: 0 0 36px; margin-right : 5px; justify-content:flex-start;\" src=\"${macroActor.data.img}\" width=\"42\" height=\"42\"/>\n        <h3 style=\"flex : 1; justify-content:flex-end\">${macroActor.data.name} </h3>\n      </div>\n      <div style=\"display:flex; flex-direction:row; justify-content:space-between; align-items:center; flex-grow:1;\">\n        <h3 style=\"flex : 3; justify-content:flex-start;\">Spell Slots : ${data.spellSlots.filter(ss=> ss.value > 0).map(ss=> ss.value).join(`/`)}</h3>\n        <h3 style=\"flex : 2; justify-content:flex-end;\">Sorcery Points : ${data.sorcPoints.value}/${data.sorcPoints.max}</h3>\n      </div>\n      ${getActions()}\n      ${getSecondaryActions()}\n\t\t</div>`;\n\t\t\n\t\tfunction getActions()\n\t\t{\n\t\t\tlet { action, second } = getHTML();\n\t\n\t\t\treturn `\n\t\t\t\t<div style=\"display:flex; flex-direction:row; justify-content:space-between; align-items:center; flex-grow:1;\">\n\t\t\t\t\t<h3 style=\"flex : 1; justify-content:flex-start;\"><label>Select Action : </label></h3>\n\t\t\t\t\t<h3 style=\"flex : 1; justify-content:flex-end;\">\n\t\t\t\t\t\t<select id=\"${dialog_id}actions\">\n\t\t\t\t\t\t\t${(data.sorcPoints.value !== data.sorcPoints.max && checkSlotsAvailable()) ? `<option ${action === `sp` ? `selected` : ``} value=\"sp\">Convert Spell Slots</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 2 && checkSlotsMissing()) ? `<option ${action === `ss` ? `selected` : ``} value=\"ss\">Create Spell Slots</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 0 && checkAction(`Metamagic: Careful Spell`)) ? `<option ${action === `careful` ? `selected` : ``} value=\"careful\">Careful Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 0 && checkAction(`Metamagic: Distant Spell`)) ? `<option ${action === `distant` ? `selected` : ``} value=\"distant\">Distant Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 0 && checkAction(`Metamagic: Empowered Spell`)) ? `<option ${action === `empowered` ? `selected` : ``} value=\"empowered\">Empowered Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 0 && checkAction(`Metamagic: Extended Spell`)) ? `<option ${action === `extended` ? `selected` : ``} value=\"extended\">Extended Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 2 && checkAction(`Metamagic: Heightened Spell`)) ? `<option ${action === `heightened` ? `selected` : ``} value=\"heightened\">Heightened Spell</option>`: ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 1 && checkAction(`Metamagic: Quickened Spell`)) ? `<option ${action === `quickened` ? `selected` : ``} value=\"quickened\">Quickened Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 1 && checkAction(`Metamagic: Subtle Spell`)) ? `<option ${action === `subtle` ? `selected` : ``} value=\"subtle\">Subtle Spell</option>` : ``}\n\t\t\t\t\t\t\t${(data.sorcPoints.value > 0 && checkAction(`Metamagic: Twinned Spell`)) ? `<option ${action === `twinned` ? `selected` : ``} value=\"twinned\">Twinned Spell</option>` : ``}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</h3>\n\t\t\t\t</div>\n\t\t\t\t`;\n\t\t}\n\t\tfunction getSecondaryActions()\n\t\t{\n\t\t\tlet { action, second } = getHTML(), label = ``, options = ``;\n\t\n\t\t\tswitch(action)\n\t\t\t{\n\t\t\t\tcase `sp` :\n\t\t\t\tcase `twinned` :\n\t\t\t\t\tlabel = `Pick Spell Slot : `;\n\t\t\t\t\toptions = data.spellSlots\n\t\t\t\t\t\t.filter(({value})=> value!==0)\n\t\t\t\t\t\t.map(({slot})=>`<option ${second === slot.toString() ? `selected` : ``} value=\"${slot}\">Level ${slot}</option>`).join(``);\n\t\n\t\t\t\t\tif(action === `twinned`)\n\t\t\t\t\t\toptions = `<option ${second === \"0\" ? `selected` : ``} value=\"0\">Cantrip</option>${options}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase `ss` :\n\t\t\t\t\tlabel = `Pick Spell Slot : `;\n\t\t\t\t\toptions = data.spellSlots\n\t\t\t\t\t\t.filter(({slot, value, max})=> slot < 6 && data.cost[slot-1] <= data.sorcPoints.value && value < max)\n\t\t\t\t\t\t.map(({slot})=> `<option ${second === slot.toString() ? `selected` : ``} value=\"${slot}\">Level ${slot}</option>`).join(``);\n\t\t\t\t\tbreak;\n\t\t\t\tcase `careful` :\n\t\t\t\tcase `distant` : \n\t\t\t\tcase `empowered` : \n\t\t\t\tcase `extended` :\n\t\t\t\tcase `heightened` :\n\t\t\t\tcase `quickened` :\n\t\t\t\tcase `subtle` :\n\t\t\t\t\tlabel = options = ``;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault : \n\t\t\t\t\tlabel = options = `Error`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\treturn label === `` ? `` : `\n\t\t\t\t<div style=\"display:flex; flex-direction:row; justify-content:space-between; align-items:center; flex-grow:1;\">\n\t\t\t\t\t<h3 style=\"flex : 1; justify-content:flex-start;\"><label>${label}</label></h3>\n\t\t\t\t\t<h3 style=\"flex : 1; justify-content:flex-end;\">\n\t\t\t\t\t\t<select id=\"${dialog_id}secondary\">\n\t\t\t\t\t\t\t${options}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</h3>\n\t\t\t\t</div>\n\t\t\t\t`;\n\t\t}\n  }\n  function update()\n  {\n    dialog.data.content = getContent();\n    dialog.render(true);\n  }\n  function getHTML()\n  {\n    let action = $.find(`#${dialog_id}actions`)[0]?.value;\n    let second = $.find(`#${dialog_id}secondary`)[0]?.value;\n\n    return { action, second };\n  }\n  async function executeHTML(html)\n  {\n    let html_data = {\n      action : html.find(`#${dialog_id}actions`)[0]?.value,\n      second : html.find(`#${dialog_id}secondary`)[0]?.value\n\t\t};\n\t\tlet level = 0;\n\n    log(\"Action     | \", html_data.action);\n\t\tlog(\"Secondary  | \", html_data.second);\n\n\t\tswitch(html_data.action)\n\t\t{\n\t\t\tcase `sp` :\n\t\t\t\tlevel = parseInt(html_data.second);\t\n\t\t\t\teditSpellSlots(level, -1);\n\t\t\t\teditSorceryPoints(level);\n\t\t\t\tbreak;\n\t\t\tcase `twinned` :\n\t\t\tcase `ss` :\n\t\t\t\tlevel = parseInt(html_data.second);\n\t\t\t\tif(html_data.action === `ss`)\n\t\t\t\t\teditSpellSlots(level,+1);\n\t\t\t\teditSorceryPoints((data.cost[level]-1)*-1);\n\t\t\t\tbreak;\n\t\t\tcase `careful` :\n\t\t\tcase `distant` : \n\t\t\tcase `empowered` : \n\t\t\tcase `extended` :\n\t\t\t\teditSorceryPoints(-1);\n\t\t\t\tbreak;\n\t\t\tcase `quickened` :\n\t\t\tcase `subtle` :\n\t\t\t\teditSorceryPoints(-2);\n\t\t\t\tbreak;\n\t\t\tcase `heightened` :\n\t\t\t\teditSorceryPoints(-3);\n\t\t\t\tbreak;\n\t\t\tdefault : \n\t\t\t\tbreak;\n\t\t}\n\n\t\tawait updateActor();\n\t\tawait executeItem(html_data.action);\n\t}\n}\nfunction checkAction(name)\n{\n\treturn data.items.find(i=>i.name === name)._id !== null;\n}\nfunction editSorceryPoints(num)\n{\n\tdata.sorcPoints.value = Math.clamped(data.sorcPoints.value + num, 0, data.sorcPoints.max);\n\tdata.pointDiff = true;\n}\nfunction editSpellSlots(level, num)\n{\n\tlet obj = {value, max, slot} = data.spellSlots.find(d=> d.slot === level);\n\tlet index = data.spellSlots.indexOf(obj);\n\tdata.spellSlots[index].value = Math.clamped(value + num, 0, max);\n\tdata.spellSlots[index].diff = true;\n\tdata.spellDiff = true;\n}\nasync function executeItem(item_code)\n{\n\tif(!display_message || !item_code  || item_code === `ss` || item_code === `sp` ) return;\n\tlet item_name = data.items.find(i=>i.name.toLowerCase().includes(item_code))?.name;\t\n\n\tif(!item_name) return error(`Failed to find ${item_code}`);\n\n\tawait macroActor.items.getName(item_name)?.roll();\n}\nasync function updateActor()\n{\n\tif(data.pointDiff)\n\t{\n\t\tlet uses = duplicate(data.sorcPoints);\n\t\tawait macroActor.items.getName(\"Font of Magic\").update({ \"data.uses\" : uses });\n\t}\n\n\tif(data.spellDiff)\n\t{\n\t\tlet spells = {};\n\t\tdata.spellSlots.filter(d=> d.diff).forEach(d=> {\n\t\t\tlet key = d.slot === `pact` ? `pact` : `spell${d.slot}`;\n\t\t\tspells[key] = { value : d.value };\n\t\t});\n\n\t\tif(spells === {}) return;\n\t\tawait macroActor.update({\"data.spells\" : spells});\n\t}\n}","folder":null,"sort":0,"permission":{"default":0,"05k4ub2VgC3VLxAg":3},"flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.HzNg1DHlWywQVj0G"}},"_id":"A5hbsvzDnuAfYlAl"}
{"name":"Hexblade-Liga/Desliga","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.8Guutr7R1Tddogoy"}},"scope":"global","command":"//------------------------------------------------------\n// Hexblade's Curse Toggle\n//     Toggles the bonus damage to weapon and spell\n//     attacks as well as the critical hit range change\n//     due to Hexblade's Curse for dnd5e characters.\n//\n//     It whispers the toggle's status to the GM,  and \n//     shows an icon on the character's token when \n//     the effect is active.\n//\n//     The only set-up that is required, is putting the\n//     warlock's character id below here. You can find \n//     this id by right-clicking on an Actor in Foundry\n//     and selecting Export Data. The very first field in\n//     the .json file is called \"_id\" and the string following\n//     it is the id you need.\n//------------------------------------------------------\nconst hexActor = game.actors.get(\"j89JNMFVXG2anMX4\");\n//------------------------------------------------------\n\nconst currentCritThreshold = hexActor.getFlag(\"dnd5e\",\"weaponCriticalThreshold\")\nconst hexToken = hexActor.getActiveTokens()[0];\nconst prof = hexActor.data.data.attributes.prof;\n\nif (currentCritThreshold == 20) {\n    hexToken.toggleEffect(\"systems/dnd5e/icons/spells/phb-branding-smite.jpg\");\nhexActor.setFlag(\"dnd5e\",\"weaponCriticalThreshold\",19);\nconsole.log(\"Melee weapon attack damage bonus:\",hexActor.data.data.bonuses.mwak.damage)\nconsole.log(\"Proficiency bonus:\",hexActor.data.data.attributes.prof)\nlet updates = {\n'data.bonuses.mwak.damage': prof,\n'data.bonuses.rwak.damage': prof,\n'data.bonuses.msak.damage': prof,\n'data.bonuses.rsak.damage': prof\n};\nhexActor.update(updates);\n//console.log(\"Hexblade's Curse Activated\");\nlet msgContent = \"Hexblade's Curse: Target Acquired\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  //whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});\n} else {\n    hexToken.toggleEffect(\"systems/dnd5e/icons/spells/phb-branding-smite.jpg\");\nhexActor.setFlag(\"dnd5e\",\"weaponCriticalThreshold\",20);\nlet updates = {\n'data.bonuses.mwak.damage': 0,\n'data.bonuses.rwak.damage': 0,\n'data.bonuses.msak.damage': 0,\n'data.bonuses.rsak.damage': 0\n};\nhexActor.update(updates);\n//console.log(\"Hexblade's Curse Deactivated\");\nlet msgContent = \"Hexblade's Curse: Target Lost\";\nlet chatData = {\n  user:  game.user.id,\n  speaker: game.user,\n  content:  msgContent,\n  //whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n};\nChatMessage.create(chatData,{});\n}","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/spells/enchant-orange-3.jpg","actorIds":[],"_id":"CXa9qsNBi2lfTTt0"}
{"name":"sneaak","type":"script","author":"05k4ub2VgC3VLxAg","img":"modules/jb2a_patreon/Library/1st_Level/Sneak_Attack/Sneak_Attack_Dark_Green_Thumb.webp","scope":"global","command":"//You'll need the module Sequence from Wasp to be Able to use this macro.\n//https://github.com/fantasycalendar/FoundryVTT-Sequencer\n//This macro is for Melee Attack only.\n//DON'T FORGET TO DOWNLOAD THE WEBM FILES FOR THE SNEAK ATTACK TEXT ANIMATION. Available here : https://drive.google.com/drive/folders/16wwmgELRDyL3JG-Zw3k_8PTjJP5aUysX?usp=sharing\n//Add the downloaded files inside this directory /Library/Generic/UI/\n\n//The paths are made for the patreon module, change \"jb2a_patreon\" but \"JB2A_DnD5e\" in each paths below. (without quotation marks)\n\nlet target = Array.from(game.user.targets)[0];\n\nlet sequence = new Sequence()\n    .effect()\n        .file(\"modules/jb2a_patreon/Library/1st_Level/Sneak_Attack/Sneak_Attack_Dark_Green_300x300.webm\") //Choose the variation of Sneak Attack you want to use.\n        .atLocation(canvas.tokens.controlled[0])\n        .JB2A()\n        .anchor({ x: 0.5, y: 1 })\n        .scale(.7)\n    .effect()\n        .file(\"modules/jb2a_patreon/Library/Generic/UI/SneakAttackText_01_Dark_Red_400x400.webm\") //Choose the Sneak Attack text animation by choosing SneakAttackText01 or SneakAttackText02\n        .atLocation(canvas.tokens.controlled[0])\n        .JB2A()\n        .anchor({ x: 0.5, y: 0.25 })\n        .scale(.7)\n    .effect()\n    .file(\"modules/jb2a_patreon/Library/Generic/Weapon_Attacks/Melee/Sword01_Fire_Regular_Red_800x600.webm\") //Choose your melee attack animation in our Library/Generic/Weapon_Attack/Melee directory.\n    .atLocation(canvas.tokens.controlled[0])\n    .reachTowards(target)\n    .JB2A()\n    .delay(2000) //This is a delay before the melee attack begins. The value is in milliseconds, modify it as you wish. You can delete the line if you don't want the delay.\n    .mirrorY()\n    .play()","folder":null,"sort":0,"permission":{"default":0,"05k4ub2VgC3VLxAg":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.ocvs18GF9I3gKN89"}},"_id":"GCOswr4tU647ArAG"}
{"name":"Lay on Hands-Macro","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.cT2KBUzNq68HEt8X"}},"scope":"global","command":"/**\n * System: D&D5e\n * Apply lay-on-hands feat to a target character.  Asks the player how many HP to heal and\n * verifies the entered value is within range before marking down usage counter. If the player\n * has OWNER permissions of target (such as GM or self-heal) the HP are applied automatically; \n * otherwise, a 'roll' message appears allowing the target character to right-click to apply healing.\n */\n\nlet confirmed = false;\nlet actorData = actor || canvas.tokens.controlled[0] || game.user.character;\nlet featData = actorData ? actorData.items.find(i => i.name===\"Lay on Hands\") : null;\n\nif(actorData == null || featData == null) \n    ui.notifications.warn(`Selected hero must have \"Lay on Hands\" feat.`);\nelse if (game.user.targets.size !== 1)\n    ui.notifications.warn(`Please target one token.`);\nelse\n{\n    let featUpdate = duplicate(featData);\n    let targetActor = game.user.targets.values().next().value.actor;\n    let maxHeal = Math.clamped(featUpdate.data.uses.value, 0, \n        targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\n\n    let content = `<p><em>${actorData.name} lays hands on ${targetActor.data.name}.</em></p>\n                    <p>How many HP do you want to restore to ${targetActor.data.name}?</p>\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"num\">HP to Restore: (Max = ${maxHeal})</label>\n                            <input id=\"num\" name=\"num\" type=\"number\" min=\"0\" max=\"${maxHeal}\"></input>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"flavor\">Flavor:</label>\n                            <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\n                        </div>\n                    </form>`;\n    new Dialog({\n        title: \"Lay on Hands Healing\",\n        content: content,      \n        buttons: {\n            heal: { label: \"Heal!\", callback: () => confirmed = true },\n            cancel: { label: \"Cancel\", callback: () => confirmed = false }\n        },\n        default: \"heal\",\n\n        close: html => {\n            if (confirmed) \n            {\n                let number = Math.floor(Number(html.find('#num')[0].value));\n                if (number < 1 || number > maxHeal)\n                    ui.notifications.warn(`Invalid number of charges entered = ${number}. Aborting action.`);\n                else\n                {\n                    let flavor = `<strong>${html.find('#flavor')[0].value}</strong><br>`;\n                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER)\n                        // We need help applying the healing, so make a roll message for right-click convenience.\n                        new Roll(`${number}`).roll().toMessage({\n                            speaker: ChatMessage.getSpeaker(),\n                            flavor: `${actorData.name} lays hands on ${targetActor.data.name}.<br>${flavor}\n                            <p><em>Manually apply ${number} HP of healing to ${targetActor.data.name}</em></p>` });\n                    else {\n                        // We can apply healing automatically, so just show a normal chat message.\n                        ChatMessage.create({\n                            speaker: ChatMessage.getSpeaker(),\n                            content: `${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.<br>${flavor}`\n                        });\n                        game.actors.find(a => a._id===targetActor._id).update( {\n                            \"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number\n                        });\n                    }\n\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\n                    actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\n                };\n            }\n        }\n    }).render(true);\n}","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/light_10.jpg","actorIds":[],"_id":"H8guYT3SVvLfNPC4"}
{"name":"Great Weapon Master-Liga/Desliga","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/yellow_16.jpg","tooltip":"Great Weapon Master","colour":"#bfb318","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.67CT6aSibj7HD3ro"},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\nCreated Monkan#8752 with guidance from the Rage macro in the FVTT Community Macros\n\nTips to make it work\n 1 -    Have a feature called 'Great Weapon Master' for your character.\n 2 -    Make sure you have your weapons with Heavy property filled out. \n 3 -    if you make any changes to your damage or attack calculations, make sure you toggle it off.\n        As it stores the old values to replace once you disable the feat.  It could undo your changes.\n*/\n\nlet gwm='';\nlet chatMsg='';\n\n\nif (actor !== undefined && actor !== null) {\n    // find the feat Great Weapon Master\n    gwm = actor.items.find(i => i.name === 'Great Weapon Master');\n    if (gwm == undefined) { \n        ui.notifications.warn(\"Please select a single token with the Great Weapon Master feat.\");        \n    }\n\n    if (gwm !== undefined && gwm !== null) {\n\t\tchatMsg = '';\n\t\tlet enabled = false;\n\t\t// store the state of the GWM toggle in flags\n\t\tif (actor.data.flags.gwmMacro !== null && actor.data.flags.gwmMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t}\n\t\t// if GWM is active, disable it\n\t\tif (enabled) {\n            chatMsg = `${actor.name} - GWM desligado.`;\n            \n            let obj = {};\n\t\t\tobj['flags.gwmMacro'] = null;\t\t\t\n\t\t\tactor.update(obj);\n\n\t\t\t// reset items\n\t\t\tfor (let item of actor.items) {\n\t\t\t\tif (item.data.flags.gwmMacro !== null && item.data.flags.gwmMacro !== undefined) {\n\t\t\t\t\t// restoring the old value from flags\n                    let oldDmg = item.data.flags.gwmMacro.oldDmg;\n                    let oldAtk = item.data.flags.gwmMacro.oldAtk;\n\t\t\t\t\tlet obj = {};\n                    obj['data.damage.parts'] = oldDmg;\n                    obj['data.attackBonus'] = oldAtk;\n\t\t\t\t\tobj['flags.gwmMacro'] = null;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t// if GWM is disabled, enable it\n\t\t} else {\n            chatMsg = `${actor.name} GWM Ligado!`;\n            \n            let obj = {};\n\t\t\tobj['flags.gwmMacro.enabled'] = true;\n\t\t\tactor.update(obj);\n\n            // update items\n            let gwmAtk = -5;\n\t\t\tlet gwmDmg = 10;\n\t\t\tfor (let item of actor.items) {\n                let isMelee = getProperty(item, 'data.data.actionType') === 'mwak';\n                let isHeavy = getProperty(item, 'data.data.properties.hvy')\n\t\t\t\tif (isMelee && isHeavy && item.data.data.damage.parts.length > 0) {\n\t\t\t\t\tconsole.log('updating ' + item);\n                    let obj = {};\n                    let atk = item.data.data.attackBonus;\n                    let dmg = item.data.data.damage.parts;\n                    // Save old attack and damage values\n                    obj['flags.gwmMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n                    obj['flags.gwmMacro.oldAtk'] = JSON.parse(JSON.stringify(atk));\n                    // Set the new attack and damage values\n                    if (atk !== null) {\n                        atk += '' + gwmAtk;\n                    } else {\n                        atk = gwmAtk;\n                    }\n\t\t\t\t\tdmg[0][0] = `${dmg[0][0]} + ${gwmDmg}`;\n                    obj['data.damage.parts'] = dmg;\n                    obj['data.attackBonus'] = atk;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n    }\n\n} else ui.notifications.warn(\"Please select a token.\");\n\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n    };\n\tChatMessage.create(chatData, {});\n}\nif (token)\n  MacroMarker.toggle(this, { entity: token });","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/yellow_16.jpg","actorIds":[],"_id":"JhJeeBPZ5W8cu5FV"}
{"name":"Paladin-Sacred_weapon","permission":{"default":0,"X2FU4EYTKyUpwF0o":3},"type":"chat","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Hpp1xQ6oZg8AlnxB"}},"scope":"global","command":"let target = canvas.tokens.get(args[1]);\nlet targetActor = target.actor;\nlet weapons = targetActor.items.filter(i => i.data.type === `weapon`);\nlet weapon_content = ``;\nlet ActorSetFlag = game.macros.getName(\"ActorSetFlag\");\nlet ActorUnSetFlag = game.macros.getName(\"ActorUnSetFlag\");\nlet ActorGetFlag = game.macros.getName(\"ActorGetFlag\");\n\nfor (let weapon of weapons) {\n    weapon_content += `<option value=${weapon.id}>${weapon.name}</option>`;\n}\nif (args[0] === \"on\") {\n    let content = `\n<div class=\"form-group\">\n  <label>Weapons : </label>\n  <select name=\"weapons\">\n    ${weapon_content}\n  </select>\n</div>`;\n\n    new Dialog({\n        content,\n        buttons:\n        {\n            Ok:\n            {\n                label: `Ok`,\n                callback: (html) => {\n                    let itemId = html.find('[name=weapons]')[0].value;\n                    let item = targetActor.items.get(itemId);\n                    let copy_item = duplicate(item);\n                    let bonus = args[2];\n                    let wpAttack = copy_item.data.attackBonus\n                    let dimLight = target.data.dimLight;\n                    let brightLight = target.data.brightLight\n                    target.actor.setFlag(`world`, `sacredWeapon`, {\n                        bonus: bonus,\n                        weapon: itemId,\n                        weaponAttack: wpAttack,\n                        dimLight: dimLight,\n                        brightLight: brightLight\n                    });\n                    copy_item.data.attackBonus = (copy_item.data.attackBonus + bonus)\n                    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n                    target.update({\"dimLight\": 40, \"brightLight\": 20})\n                    \n                }\n            },\n            Cancel:\n            {\n                label: `Cancel`\n            }\n        }\n    }).render(true);\n}\n\nif (args[0] === \"off\") {\n    let flag = target.actor.getFlag('world', 'sacredWeapon')\n    let wpAttack = flag.weaponAttack\n    let itemId = flag.weapon\n    let item = target.actor.items.get(itemId);\n    let dimLight = flag.dimLight\n    let brightLight = flag.brightLight\n    let copy_item = duplicate(item);\n    copy_item.data.attackBonus = wpAttack;\n    targetActor.updateEmbeddedEntity(\"OwnedItem\", copy_item);\n    target.update({\"dimLight\": dimLight, \"brightLight\": brightLight})\n    target.actor.unsetFlag(`world`, `sacredWeapon`);\n}","author":"X2FU4EYTKyUpwF0o","img":"modules/GMmacros/player-img/Sacred-weapon.png","actorIds":[],"_id":"QAijZtZFCIrD7Yif"}
{"name":"Dodge-action","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Tnx74XaZaMyuJXT0"}},"scope":"global","command":"// requer uma condition CUB chamada Dodge com as flags adicionadas.\nif(!game.cub.hasCondition(\"Dodge\")) return game.cub.addCondition(\"Dodge\");\ngame.cub.removeCondition(\"Dodge\");","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/defensive-stance.jpg","actorIds":[],"_id":"ij4VriAqSjTYqtV3"}
{"name":"Rage-Macro-Liga/Desliga","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/red_10.jpg","tooltip":"Rage-Macro","colour":"#ff6600","trigger":""},"markers":{"markers":{"jv8ZYVc1mcpm4svY":true},"type":"Token"}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.CgAyK40KyztIirYa"}},"scope":"global","command":"//\t\tDISCLAIMER:\t\tThis macro is an evolved version of the original D&D 5e Rage Macro masterwork written by Felix#6196.\n//\t\t\t\t\t\tNorc#5108 is now maintaining this macro along with continued support from Felix.\n//\n//\n//\t\tUPDATES:\t\t1.\tFixed errors resulting from declarations of \"actor\" and \"token\" in a script macro. \n//\t\t\t\t\t\t\tAdded automatic Totem Spirit: Bear detection and resistance application \n//\t\t\t\t\t\t\tAdded error messages for trying to rage with no token or no barbarian selected\n//\t\t\t\t\t\t2.\t(Felix) Added resource/usage deduction and errors (re-added after accidentally overwriting the addition)\n//\t\t\t\t\t\t\tFixed rage damage at level 8\n//\t\t\t\t\t\t3.\t(2020/05/30) \"Version 2.0\" \t\n//\t\t\t\t\t\t\tImplemented Felix's idea to use global melee weapon attack bonus instead of modifying items\n//\t\t\t\t\t\t\tImproved Rage icon toggling to be more reliable\n//\t\t\t\t\t\t\tRemoved code from the resource management that created dependency on The Furnace Advanced Macros\n//\t\t\t\t\t\t\tImplemented Felix's fix for issue where new resistances and rage uses were not saving properly\n//\t\t\t\t\t\t\tFixed rage damage formula again...\n//\t\t\t\t\t\t\tAdded basic support for non-strength Based barbarians (Dex, Hexblade)\n//\t\t\t\t\t\t\tAdded optional ability to toggle the icon and name of the macro itself based on current raging state.\n//\t\t\t\t\t\t4.\t(2020/06/04) \n//\t\t\t\t\t\t\tFixed bug with experimental macro name/icon toggle only by renaming \"actor\" and \"token\"\n//\t\t\t\t\t\t\tAdded basic localization support to allow searching for translated class features\n//\t\t\t\t\t\t5.\t(2020/06/10)\n//\t\t\t\t\t\t\tRework to rage damage logic under the hood for edge case (other changes to bonus damage mid-combat) \n//\t\t\t\t\t\t\tRemoved logic that was causing multiple character sheets to open in some cases\n//\t\t\t\t\t\t\tEnhanced localization support\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!   Bonus Tip 1: \t\tOptional Rage Resource Consumption\n//!!!\tTo automatically use and track Rage, you must have a resource exactly named \"Rage\" on your character sheet. This text can be changed\n//!!!\tby altering the value for \"rageResourceName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro can then automatically detect the Rage resource.\n//!!!\n//!!!\tBonus Tip 2: \t\tBear Totem Spirit Barbs\n//!!!\tIf you chose the Spirit Seeker Primal path, and at level 3 you chose the Bear Totem Spirit (resistance to all non-psychic damage), \n//!!!\tin your 5E character sheet, double-check that the name of your Totem Spirit feature to EXACTLY \"Totem Spirit: Bear\". This text can be\n//!!!\tchanged by altering the value for \"bearTotemFeatureName\" in the LOCALIZATION SUPPORT section below).\n//!!!\tNote: \tImporting via VTTA Beyond Integration uses this text already. The macro then automatically adds the extra \n//!!!\t\t\tBear Totem Spirit resistances.\n//!!!\n//!!!\tBonus Tip 3: \t\tThrown Weapons\n//!!!\tWhen a barb throws a weapon using strength, typically a javelin but also possibly a dagger, dart, sword, bar table etc, the rage bonus\n//!!!\tshould not be added because it is a ranged attack. However, D&D5E calls javelins and daggers Melee Weapons, because technically they\n//!!!\tare both. To solve this issue, if you always throw the weapon, click the weapon's details and change the attack type to \"Ranged Weapon\n//!!!\tAttack\" in the Action Type dropdown. If you want, you can add a second copy of the item (with no weight/quantity) to use for meleeing.\n//!!!\n//!!!\tBonus Tip 4: \t\tThe Rage Condition\n//!!!\tIf you use the Combat Utility Belt module's Condition Lab, try adding a condition called \"Raging\" with the same icon\n//!!!\tas the optional rage icon overlay, 'icons/svg/explosion.svg' by default.  See EXPERIMENTAL MACRO ICON/NAME TOGGLE section below.\n//!!!\n//!!!\tBonus Tip 5: \t\tObsidian Sheet Compatibility\n//!!!\tIf using Obsidian module, try replacing \"Barbarian\" with \"brb\" as the barbClassName value in LOCALIZATION SUPPORT below.\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL TOKEN ICON-\tOn by default. If a path to a rage icon is defined, it displays like a condition on the raging barbarian.\n//!!!\t\t\t\t\t\t\tTo use a different icon, manually change the filepath below or leave it empty ('') to disable the effect.\n//!!!\nconst rageIconPath = 'icons/svg/explosion.svg';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL RESOURCE DEDUCTION \tOn by default. First option automatically subtracts from the Rage Resource if enabled.\n//!!!\t\t\t\t\t\t\t\t\tSecond option prevents raging if no Rage resource is left. Set to false if you do not want this.\n\n\t\t\tconst deductResource = true;\n\t\t\tconst preventNegativeResource = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tOPTIONAL NON-STRENGTH BARBARIAN SUPPORT\t\tONLY override to FALSE if your barbarian does not use Strength to make melee attacks\n//!!!\t\t\t\t\t\t\t\t\t\t\t\tand therefore does not get the Rage bonus to melee weapon attack damage.\n//!!!\n\t\t\tconst strAttacks = true;\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tEXPERIMENTAL MACRO ICON/NAME TOGGLE\t\tIf enabled, the macro icon and name toggles based on the barbarian's rage state.\n//!!!\t\t\t\t\t\t\t\t\t\t\tCAUTIONS: \t1. \tThis feature is off by default and is intended for ADVANCED USERS ONLY.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t2. \tRequires configuration using \"The Furnace\" module for a player to run!\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThe GM needs to grant The Furnace's \"Run as GM\" permission for this macro.\n//!!!\t\t\t\t\t\t\t\t\t\t\t\t\t\t3. \tWorks best with only one barbarian using this feature at a time.\n\n\t\t\t//To auto-toggle the macro's icon/name, override toggleMacro to true below.\n\t\t\tconst toggleMacro = false;\n\n\t\t\t//To use a different icon, manually change the filepath here\n\t\t\tconst stopRageIconPath = 'icons/svg/unconscious.svg';\n\n\t\t\t//You must update the following constant to this macro's exact name for the macro icon toggling to work.\n\t\t\tconst rageMacroName = 'Rage';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n//declarations\nlet barb = '';\nlet chatMsg = '';\nlet bear = '';\nlet noRage = false;\nlet rageDmgAdded = false;\nlet toggleResult = false;\nlet macroActor = actor;\nlet macroToken = token;\n\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n//!!!\tLOCALIZATION SUPPORT\t\t\t\tSets names of D&D5E features as constants instead of hardcoding to allow easier translation.\n//!!!\t\t\t\t\t\t\t\t\t\tSets error messages and flavor text as constants also for easier translation.\n//!!!\n\t\t\t//MUST MATCH VALUES IN CHARACTER SHEET (if present)\n\t\t\tconst barbClassName = 'Barbarian';\n\t\t\tconst rageResourceName = 'Rage';\n\t\t\tconst bearTotemFeatureName = 'Totem Spirit: Bear';\n\n\t\t\t//All remaining values may be changed freely\n\n\t\t\t//Rage chat message flavor text. Actor's name appears immediately before these two strings in the message.\n\t\t\tconst rageMsg = ' is RAAAAAGING!'\n\t\t\tconst endRageMsg =  ' is no longer raging.';\n\n\t\t\t//error and warning messages\n\t\t\tconst errorSelectBarbarian = 'Please select a single barbarian token.';\n\t\t\tconst errorNoRage = ' does not have any rage left, time for a long rest!';\n\t\t\tconst warnMacroNotFound = ' is not a valid macro name, please fix. Rage toggle successful but unable to alter macro.';\n\t\t\tconst errorSelectToken = 'Please select a token.';\n\t\t\tconst errorFailRevert = 'Failed to revert global melee weapon attack bonus, please check manually.';\n//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n//main\n//check to see if Actor exists and is a barbarian\nif (macroActor !== undefined && macroActor !== null) {\n\n\t// get the barbarian class item\n\tbarb = macroActor.items.find(i => i.name === `${barbClassName}`);\n\tif (barb == undefined) {\n\t\tui.notifications.warn(`${errorSelectBarbarian}`);\n\t}\n\tif (barb !== undefined && barb !== null) {\n\t\tchatMsg = `${macroActor.name} + rageMsg`;\n\t\tlet enabled = false;\n\t\t// Store the state of the rage toggle flags that indicate if rage is active or not\n\t\tif (macroActor.data.flags.rageMacro !== null && macroActor.data.flags.rageMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t\t\t// Store whether there is also a rage damage bonus currently active\n\t\t\t\tif (macroActor.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\n\t\t\t\t\trageDmgAdded = true;\n\t\t\t\t}\n\t\t}\n\n\t\t//Calculate rage value for use in damage reversion and application\n\t\t// Determining the barbarian level\n\t\tlet barblvl = barb.data.data.levels;\n\n\t\t// Formula to determine the rage bonus damage depending on barbarian level\n\t\tlet lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\n\t\tlet rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\n\t\tlet dmg = JSON.parse(JSON.stringify(macroActor.data.data.bonuses.mwak.damage));\n\n\t\t// if rage is active, disable it\n\t\tif (enabled) {\n\t\t\tchatMsg = `${macroActor.name} ${endRageMsg}`;\n\t\t\t// reset resistances and melee weapon attack bonus\n\t\t\tlet obj = {};\n\t\t\tobj['flags.rageMacro'] = null;\n\t\t\t//revert damage resistances\n\t\t\tobj['data.traits.dr'] = macroActor.data.flags.rageMacro.oldResistances;\n\n\t\t\t//carefully revert rage global mwak damage bonus to original value, if that bonus is active\n\t\t\t//eventually want to add support so only last instance found is replaced.\n\t\t\tif(rageDmgAdded) {\n\t\t\t\tif (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\n\t\t\t\t\tconsole.log('Removing simple rage damage');\n\t\t\t\t\tobj['data.bonuses.mwak.damage']='';\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('Removing complex rage damage');\n\t\t\t\t\tlet patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\n\t\t\t\t\tlet result = dmg.search(patt);\n\t\t\t\t\tif (result !== -1) {\n\t\t\t\t\t\tlet len = ('' + rageDmg).length;\n\t\t\t\t\t\tlet origDmg = duplicate(dmg);\n\t\t\t\t\t\tlet firstHalfDmg = duplicate(dmg).substring(0,result);\n\t\t\t\t\t\t//Test String: 2d6 + 2 + 2d6\n\t\t\t\t\t\tlet lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\n\t\t\t\t\t\tdmg = `${firstHalfDmg}${lastHalfDmg}`;\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage']=dmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tui.notifications.error(`${errorFailRevert}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmacroActor.update(obj);\n\n\t\t// if rage is disabled, enable it\n\t\t} else {\n\t\t\tif (deductResource) {\n\t\t\t\tlet hasAvailableResource = false;\n\t\t\t\tlet newResources = duplicate(macroActor.data.data.resources)\n\t\t\t\tlet obj = {}\n\t\t\t\t// Look for Resources under the Core macroActor data\n\t\t\t\tlet resourceKey = Object.keys(macroActor.data.data.resources).filter(k => macroActor.data.data.resources[k].label === `${rageResourceName}`).shift();\n\t\t\t\tif (resourceKey && (macroActor.data.data.resources[resourceKey].value > 0 || !preventNegativeResource)) {\n\t\t\t\t\thasAvailableResource = true;\n\t\t\t\t\tnewResources[resourceKey].value--;\n\t\t\t\t\tobj['data.resources'] = newResources \n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t\tif (!hasAvailableResource) {\n\t\t\t\t\tui.notifications.error(`${macroActor.name} ${errorNoRage}`);\n\t\t\t\t\tnoRage=true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//activate rage if there is rage available, or if it is okay to rage with 0 resources\n\t\t\tif (!noRage) {\n\t\t\t\tchatMsg = `${macroActor.name} ${rageMsg}`;\n\t\t\t\t// update resistance\n\t\t\t\tlet obj = {};\n\t\t\t\t// storing old resistances in flags to restore later\n\t\t\t\tobj['flags.rageMacro.enabled'] = true;\n\t\t\t\tobj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(macroActor.data.data.traits.dr));\n\t\t\t\t// add bludgeoning, piercing and slashing resistance\n\t\t\t\tlet newResistance = duplicate(macroActor.data.data.traits.dr);\n\t\t\t\tif (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\n\t\t\t\tif (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\n\t\t\t\tif (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\n\t\t\t\t//If bear totem, add bear totem resistances.\n\t\t\t\tbear = macroActor.items.find(i => i.name === `${bearTotemFeatureName}`)\n\t\t\t\tif (bear !== undefined && bear!== null) {\n\t\t\t\t\tif (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\n\t\t\t\t\tif (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\n\t\t\t\t\tif (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\n\t\t\t\t\tif (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\n\t\t\t\t\tif (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\n\t\t\t\t\tif (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\n\t\t\t\t\tif (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\n\t\t\t\t\tif (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\n\t\t\t\t\tif (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\n\t\t\t\t}\n\t\t\t\tobj['data.traits.dr'] = newResistance;\n\t\t\t\tmacroActor.update(obj);\n\n\t\t\t\t// For Strength barbarians, update global melee weapon attack bonus to include rage bonus\n\t\t\t\tif (strAttacks) {\n\t\t\t\t\tobj['flags.rageMacro.rageDmgAdded'] = true;\n\t\t\t\t\t// Preserve old mwak damage bonus if there was one, just in case\n\t\t\t\t\tobj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n\t\t\t\t\t//actually add the bonus rage damage to the previous bonus damage\n\t\t\t\t\t//respect roll formulas by doing string addition if value is already present.\n\t\t\t\t\tif (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\n\t\t\t\t\t\tconsole.log('Adding simple rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = rageDmg;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Adding complex rage damage');\n\t\t\t\t\t\tobj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\n\t\t\t\t\t}\n\t\t\t\t\tmacroActor.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!noRage) {\n\t\t\t// toggle rage icon, if rage path is defined above\n\t\t\t(async () => { \n\t\t\t\ttoggleResult = await macroToken.toggleEffect(rageIconPath);\n\t\t\t\tif (toggleResult == enabled) macroToken.toggleEffect(rageIconPath);  \n\t\t\t})();\n\t\t\t\n\t\t\t//toggle macro icon and name, if macro name is correct and stop rage icon path is defined\n\t\t\tlet rageMacro = game.macros.getName(rageMacroName);\n\t\t\t\t//check for name of macro in its \"off\" form\n\t\t\t\tif (rageMacro == null || rageMacro == undefined) {\n\t\t\t\t\trageMacro = game.macros.getName('Stop ' + rageMacroName);\n\t\t\t\t}\n\t\t\tlet obj = {};\n\t\t\tif ( (rageMacro !== null && rageMacro !== undefined) && toggleMacro == true && \n\t\t\t\t\t+ (stopRageIconPath !== null && stopRageIconPath !== undefined && stopRageIconPath !== '') ) {\n\t\t\t\tif (enabled) {\n\t\t\t\t  obj['img'] = rageIconPath;\n\t\t\t\t  obj['name'] = rageMacroName;\n\t\t\t\t} else {\n\t\t\t\t  obj['img'] = stopRageIconPath;\n\t\t\t\t  obj['name'] = 'Stop ' + rageMacroName;\n\t\t\t\t}\n\t\t\t\trageMacro.update(obj);\n\t\t\t} else {\n\t\t\tif (toggleMacro == true) ui.notifications.warn(`${rageMacroName} ${warnMacroNotFound}`);\n\t\t\t}\n\t\t}\n\t}\n} else ui.notifications.warn(errorSelectToken);\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n\t};\n\tChatMessage.create(chatData, {});\n}\n\nif (token)\n  MacroMarker.toggle(this, { entity: token });","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/red_10.jpg","actorIds":[],"_id":"kAp6csv45RW5JtlA"}
{"name":"Sharpshooter--Liga/Desliga","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"systems/dnd5e/icons/skills/green_01.jpg","tooltip":"Sharpshooter-Macro","colour":"#51b819","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.st5uamdtz1mivXIx"},"furnace":{"runAsGM":false}},"scope":"global","command":"/*\nCreated Monkan#8752 with guidance from the Rage macro in the FVTT Community Macros\n\nTips to make it work\n 1 -    Have a feature called 'Sharpshooter' for your character.\n 2 -    Make sure you have your weapons with Ranged Weapon Attack. \n 3 -    if you make any changes to your damage or attack calculations, make sure you toggle it off.\n        As it stores the old values to replace once you disable the feat.  It could undo your changes.\n*/\n\nlet ss='';\nlet chatMsg='';\n\n\nif (actor !== undefined && actor !== null) {\n    // find the feat Sharpshooter\n    ss = actor.items.find(i => i.name === 'Sharpshooter');\n    if (ss == undefined) { \n        ui.notifications.warn(\"Please select a single token with the Sharpshooter feat.\");        \n    }\n\n    if (ss !== undefined && ss !== null) {\n\t\tchatMsg = '';\n\t\tlet enabled = false;\n\t\t// store the state of the Sharpshooter toggle in flags\n\t\tif (actor.data.flags.ssMacro !== null && actor.data.flags.ssMacro !== undefined) {\n\t\t\tenabled = true;\n\t\t}\n\t\t// if Sharpshooter is active, disable it\n\t\tif (enabled) {\n            chatMsg = `${actor.name} Sharpshooter Ligado.`;\n            \n            let obj = {};\n\t\t\tobj['flags.ssMacro'] = null;\t\t\t\n\t\t\tactor.update(obj);\n\n\t\t\t// reset items\n\t\t\tfor (let item of actor.items) {\n\t\t\t\tif (item.data.flags.ssMacro !== null && item.data.flags.ssMacro !== undefined) {\n\t\t\t\t\t// restoring the old value from flags\n                    let oldDmg = item.data.flags.ssMacro.oldDmg;\n                    let oldAtk = item.data.flags.ssMacro.oldAtk;\n\t\t\t\t\tlet obj = {};\n                    obj['data.damage.parts'] = oldDmg;\n                    obj['data.attackBonus'] = oldAtk;\n\t\t\t\t\tobj['flags.ssMacro'] = null;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t// if Sharpshooter is disabled, enable it\n\t\t} else {\n            chatMsg = `${actor.name} Sharpshooter desligado!!`;\n            \n            let obj = {};\n\t\t\tobj['flags.ssMacro.enabled'] = true;\n\t\t\tactor.update(obj);\n\n            // update items\n            let ssAtk = -5;\n\t\t\tlet ssDmg = 10;\n\t\t\tfor (let item of actor.items) {\n                let isRanged = getProperty(item, 'data.data.actionType') === 'rwak';                \n\t\t\t\tif (isRanged && item.data.data.damage.parts.length > 0) {\n\t\t\t\t\tconsole.log('updating ' + item);\n                    let obj = {};\n                    let atk = item.data.data.attackBonus;\n                    let dmg = item.data.data.damage.parts;\n                    // Save old attack and damage values\n                    obj['flags.ssMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\n                    obj['flags.ssMacro.oldAtk'] = JSON.parse(JSON.stringify(atk));\n                    // Set the new attack and damage values\n                    if (atk !== null) {\n                        atk += '' + ssAtk;\n                    } else {\n                        atk = ssAtk;\n                    }\n\t\t\t\t\tdmg[0][0] = `${dmg[0][0]} + ${ssDmg}`;\n                    obj['data.damage.parts'] = dmg;\n                    obj['data.attackBonus'] = atk;\n\t\t\t\t\titem.update(obj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n    }\n\n} else ui.notifications.warn(\"Please select a token.\");\n\n// write to chat if needed:\nif (chatMsg !== '') {\n\tlet chatData = {\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker(),\n\t\tcontent: chatMsg\n    };\n\tChatMessage.create(chatData, {});\n}\n\nif (token)\n  MacroMarker.toggle(this, { entity: token });","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/green_01.jpg","actorIds":[],"_id":"oXaCsZvvQswZ6r2V"}
{"name":"Divine Smite - Macro","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Divine Smite","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.Sv9CNKuejk3BPdmp"}},"scope":"global","command":"/*\n * The Smite macro emulates the Divine Smite feature of Paladins in DnD 5e. A spell slot level to use\n * can be selected, which increases the number of damage dice, and smiting a fiend or undead\n * will also increase the number of damage dice.\n * \n * If a token is not selected, the macro will default back to the default character for the Actor. \n * This allows for the GM to cast the macro on behalf a character that possesses it, \n * without requiring that a PC have their character selected.\n * To execute the macro a target MUST be specified and, unless configured otherwise, the character must have an available spell slot. \n * Make your regular attack and then if you choose to use Divine Smite, run this macro.\n */\n\n//Configurable variables\nlet maxSpellSlot = 5; //  Highest spell-slot level that may be used.\nlet affectedCreatureTypes = [\"fiend\", \"undead\", \"undead (shapechanger)\"]; //  Creature types that take extra damage.\n\n// Use token selected, or default character for the Actor if none is.\nlet s_actor = canvas.tokens.controlled[0]?.actor || game.user.character;     \n\n// Verifies if the actor can smite.\nif (s_actor?.data.items.find(i => i.name === \"Divine Smite\") === undefined){\n    return ui.notifications.error(`No valid actor selected that can use this macro.`);\n}\n\nlet confirmed = false;\nif (hasAvailableSlot(s_actor)) {\n\n    // Get options for available slots\n    let optionsText = \"\";\n    for (let i = 1; i < maxSpellSlot; i++) {\n        let chosenSpellSlots = getSpellSlots(s_actor, i);\n        if (chosenSpellSlots.value > 0) {\n            optionsText += `<option value=\"${i}\">${i} - ${chosenSpellSlots.value} slots available</option>`;\n        }\n    }\n\t\n    // Create a dialogue box to select spell slot level to use when smiting.\n    new Dialog({\n        title: \"Divine Smite Damage\",\n        content: `\n        <form>\n        <p>Spell Slot level to use Divine Smite with.</p>\n            <div class=\"form-group\">\n                <label>Spell Slot Level:</label>\n                <select name=\"slot-level\">` + optionsText + `</select>\n            </div>\n            <div class=\"form-group\">\n                <label>Critical Hit:</label>\n                <input type=\"checkbox\" name=\"criticalCheckbox\">\n            </div>\n        </form>\n        `,\n        buttons: {\n            one: {\n                icon: '<i class=\"fas fa-check\"></i>',\n                label: \"SMITE!\",\n                callback: () => confirmed = true\n            },\n            two: {\n                icon: '<i class=\"fas fa-times\"></i>',\n                label: \"Cancel\",\n                callback: () => confirmed = false\n            }\n        },\n        default: \"Cancel\",\n        close: html => {\n            if (confirmed) {\n                let slotLevel = parseInt(html.find('[name=slot-level]')[0].value);\n                let criticalHit = html.find('[name=criticalCheckbox]')[0].checked;\n                smite(s_actor, slotLevel, criticalHit);\n            }\n        }\n    }).render(true);\n\n} else {\n    return ui.notifications.error(`No spell slots available to use this feature.`);    \n}\n\n/**\n * Gives the spell slot information for a particular actor and spell slot level.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @param {integer} level - the spell slot level to get information about. level 0 is deprecated.\n * @returns {object} contains value (number of slots remaining), max, and override.\n */\nfunction getSpellSlots(actor, level) {\n    return actor.data.data.spells[`spell${level}`];\n}\n\n/**\n * Returns whether the actor has any spell slot left.\n * @param {Actor5e} actor - the actor to get slot information from.\n * @returns {boolean} True if any spell slots of any spell level are available to be used.\n */\n function hasAvailableSlot(actor) {\n     for (let slot in actor.data.data.spells) {\n         if (actor.data.data.spells[slot].value > 0) {\n             return true;\n         }\n     }\n     return false;\n }\n\n/**\n * Use the controlled token to smite the targeted token.\n * @param {Actor5e} actor - the actor that is performing the action.\n * @param {integer} slotLevel - the spell slot level to use when smiting.\n * @param {boolean} criticalHit - whether the hit is a critical hit.\n */\nfunction smite(actor, slotLevel, criticalHit) {\n    let targets = game.user.targets;\n    let chosenSpellSlots = getSpellSlots(actor, slotLevel);\n\n    if (chosenSpellSlots.value < 1) {\n        ui.notifications.error(\"No spell slots of the required level available.\");\n        return;\n    }\n    if (targets.size !== 1) {\n        ui.notifications.error(\"You must target exactly one token to Smite.\");\n        return;\n    }\n\n    targets.forEach(target => {\n        let numDice = slotLevel + 1;\n        let type = target.actor.data.data.details.type?.toLocaleLowerCase();\n        if (affectedCreatureTypes.includes(type)) numDice += 1;\n        if (criticalHit) numDice *= 2;\n        new Roll(`${numDice}d8`).roll().toMessage({ flavor: \"Macro Divine Smite - Damage Roll (Radiant)\", speaker })\n    })\n\n    let objUpdate = new Object();\n    objUpdate['data.spells.spell' + slotLevel + '.value'] = chosenSpellSlots.value - 1;\n    actor.update(objUpdate);\n}","author":"NeG597KOgANJAOdY","img":"systems/dnd5e/icons/skills/light_05.jpg","actorIds":[],"_id":"z3bNTTP83PLWJqtZ"}
{"name":"Trocar-Munição","permission":{"default":0,"hvFLNQbtNU9fzbAv":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.wxN4bDWvM8gYflAe"}},"scope":"global","command":"//Ammunition Updater\n(() => {\n  if(canvas.tokens.controlled.length !== 1) return ui.notificiations.error(`Select 1 Token.`);\n\n  let target = canvas.tokens.controlled[0];\n  let items = target.actor.items;\n\n  let weapons = items.filter(i=>i.type === \"weapon\" && i.data.data.properties.amm);\n  let weapon_options = ``;\n  for(let weapon of weapons)\n  {\n    weapon_options += `<option value=\"${weapon.id}\">${weapon.name}</option>`;\n  }\n\n  let ammos = items.filter(i=>i.type === \"consumable\" && i.data.data.consumableType === \"ammo\");\n  let ammo_options = ``;\n  for(let ammo of ammos)\n  {\n    ammo_options += `<option value=\"${ammo.id}\">${ammo.name}</option>`;\n  }\n\n  let dialog_context = `\n    <p>Choose Options</p>\n    <div class =\"form-group\">\n      <label>Select Weapon</label>\n      <select id=\"weapon\" name=\"weapon\">\n        ${weapon_options}\n      </select>\n      <p></p>\n      <label>Select Ammunition</label>\n      <select id =\"ammo\" name =\"ammo\">\n        ${ammo_options}\n      </select>\n      <p></p>\n    </div>`;\n\n  new Dialog({\n    content : dialog_context,\n    buttons : {\n      one : {\n        icon :`<i class=\"fas fa-check\"></i>`,\n        label : \"Switch Ammo\",\n        callback : async (html) => {\n          let update_weapon = items.get(html.find('[name=weapon]')[0].value);\n          let old_ammo = items.get(update_weapon.data.data.consume.target);\n          let update_ammo = items.get(html.find('[name=ammo]')[0].value);\n          let update = {\n            _id : update_weapon._id,\n            data : { \n              consume : {\n                type : \"ammo\",\n                target : update_ammo.id,\n                amount : 1\n              },\n              attackBonus : (update_weapon.data.data.attackBonus + update_ammo.data.data.attackBonus - old_ammo.data.data.attackBonus),\n              damage :{\n                parts : [\n                  update_weapon.data.data.damage.parts[0],\n                  update_ammo.data.data.damage.parts[0]\n                ]\n              }\n            }\n          };\n          await target.actor.updateEmbeddedEntity(\"OwnedItem\",update);\n          display(`\n            <img src=${target.data.img} width=\"50\" height=\"50\">\n            <img src=${update_weapon.data.img} width=\"25\" height=\"25\">\n            =>\n            <img src=${update_ammo.data.img} width=\"25\" height=\"25\">\n            <p></p>\n            <table>\n              <tr>\n                <td>\n                  ${target.data.name} has changed his ammunition on ${update_weapon.name} to ${update_ammo.name}.\n                </td>\n              </tr>\n            </table>`);\n            //console.log(target,update_weapon,old_ammo,update_ammo,update);\n        }\n      }\n    }\n  }).render(true);\n})();\n\nfunction display(data = \"\")\n{\n  ChatMessage.create({\n    content : data\n  });\n}","author":"hvFLNQbtNU9fzbAv","img":"systems/dnd5e/icons/items/weapons/arrows.jpg","actorIds":[],"_id":"zJBSYIoegTe2buV6"}
{"name":"New Macro","type":"chat","author":"rbM5nB1AbUwbj4yJ","img":"modules/GMmacros/img/swap_token.png","scope":"global","command":"//Selecione dois token que vão trocar de lugar.\n\nlet targetTokens = canvas.tokens.controlled;\nfunction checkForTokens(){\n    if (targetTokens.length === 2) {\n        return swapTokens(targetTokens);\n    } else {\n        return ui.notifications.error('You must designate two tokens for switching.');\n    }\n};\n\nfunction swapTokens(tokens) {\n    tokens[0].update({'x':tokens[1].x, 'y':tokens[1].y});\n    tokens[1].update({'x':tokens[0].x, 'y':tokens[0].y});\n}\n\ncheckForTokens();","folder":null,"sort":0,"permission":{"default":0,"rbM5nB1AbUwbj4yJ":3},"flags":{"combat-utility-belt":{"macroTrigger":""},"advanced-macros":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.DmjzqVAL6mPck879"}},"_id":"Mq9y8JeqCmuiA59l"}
