{"name":"Set Token bars and nameplate","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Set Token bars and nameplate ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.iOX5h0jIxJI0VTdW"}},"scope":"global","command":"/* This will set every token in scene to always display their\r\n * token bars and nameplate, and sets the first bar to represent \r\n * HP and removes the second token bar.\r\n*/\r\n\r\nconst tokens =canvas.tokens.placeables.map(token => {\r\n   return {\r\n       _id: token.id,\r\n       \"bar1.attribute\": \"attributes.hp\",\r\n       \"bar2.attribute\": \"\",\r\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\r\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n   };\r\n});\r\n\r\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"NeG597KOgANJAOdY","img":"markers/Token_bar-Names.png","actorIds":[],"_id":"3HCaquhj21WWBfXN"}
{"name":"Stealth Check","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Stealth Check","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.RTiO1Z1tasafiWAo"}},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});","author":"NeG597KOgANJAOdY","img":"markers/StealthCheck.jpg","actorIds":[],"_id":"EztKuOtSqF26ONmB"}
{"name":"Gold_Changer","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.9ueMmrsGlKkx6kV8"}},"scope":"global","command":"//Money Give/Remover -> target necessary\r\n\r\n(()=>{\r\n\tlet targets = game.user.targets;\r\n\r\n\tlet targets_content =``;\r\n\r\n\tfor(let target of targets)\r\n\t{\r\n\t\ttargets_content += `<img src=${target.data.img} width=\"50\" height=\"50\">`\r\n\t}\r\n\r\n\tlet dialog_content = `\r\n\t<p></p>\r\n\t${targets_content}\r\n\t<div class = \"form-group\">\r\n\t\t<label for=\"pp\">Platnium<label>\r\n\t\t<input name=\"pp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\r\n\t\t<label for=\"gp\">Gold    <label>\r\n\t\t<input name=\"gp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\r\n\t\t<label for=\"ep\">Electrum<label>\r\n\t\t<input name=\"ep\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\r\n\t\t<label for=\"sp\">Silver  <label>\r\n\t\t<input name=\"sp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\r\n\t\t<label for=\"cp\">Copper  <label>\r\n\t\t<input name=\"cp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\r\n\t</div>`;\r\n\r\n\tnew Dialog({\r\n\t\tcontent : dialog_content,\r\n\t\tbuttons : \r\n\t\t{\r\n\t\t\tOk : {icon : ``, label : `Change Money.`, callback : (html) => changeMoney(targets,html)}\r\n\t\t}\r\n\t}).render(true);\r\n})();\r\n\r\nasync function changeMoney(targets,html)\r\n{\r\n\tlet difference_money = {\r\n\t\tpp : parseInt(html.find('[name=pp]')[0].value),\r\n\t\tgp : parseInt(html.find('[name=gp]')[0].value),\r\n\t\tep : parseInt(html.find('[name=ep]')[0].value),\r\n\t\tsp : parseInt(html.find('[name=sp]')[0].value),\r\n\t\tcp : parseInt(html.find('[name=cp]')[0].value)\r\n\t}\r\n\r\n  //console.log(targets,update_money);\r\n  \r\n  //divide update_money based on # of targets\r\n  difference_money = divideValue(difference_money, targets.size);\r\n\r\n  console.log(difference_money);\r\n\r\n\tfor(let target of targets)\r\n\t{\r\n    let original_money = duplicate(target.actor.data.data.currency);\r\n    let update_money = changeValue(original_money,difference_money);    \r\n\r\n    console.log(target.actor.name)\r\n    console.log(original_money)\r\n    console.log(difference_money)\r\n    console.log(update_money);\r\n\r\n    await target.actor.update({\"data.currency\" : update_money});\r\n\t}\r\n}\r\n\r\nfunction changeValue(Original, Difference)\r\n{\r\n  let Update = {pp :0, gp:0, ep:0, sp :0, cp: 0};\r\n\r\n  for(let key in Original)\r\n  {\r\n    Update[key] = Original[key] + Difference[key];\r\n    if(Update[key] < 0)\r\n    {\r\n      switch(key)\r\n      {\r\n        case \"cp\" :\r\n          if (Update[\"sp\"] > 0)\r\n          {\r\n            Update[\"cp\"] += 10;\r\n            Update[\"sp\"] -= 1;\r\n          }\r\n          else if(Update[\"ep\"] > 0)\r\n          {\r\n            Update[\"cp\"] += 50;\r\n            Update[\"ep\"] -= 1;\r\n          }\r\n          else if(Update[\"gp\"] > 0)\r\n          {\r\n            Update[\"cp\"] += 100;\r\n            Update[\"gp\"] -= 1;\r\n          }\r\n          else if(Update[\"pp\"] > 0)\r\n          {\r\n            Update[\"cp\"] += 1000;\r\n            Update[\"pp\"] -= 1;\r\n          }else{\r\n            throw new Error(`Not enough money to do that.`);\r\n          }\r\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\r\n          break;\r\n        case \"sp\" :\r\n          if (Update[\"ep\"] > 0)\r\n          {\r\n            Update[\"sp\"] += 5;\r\n            Update[\"ep\"] -= 1;\r\n          }\r\n          else if(Update[\"gp\"] > 0)\r\n          {\r\n            Update[\"sp\"] += 10;\r\n            Update[\"gp\"] -= 1;\r\n          }\r\n          else if(Update[\"pp\"] > 0)\r\n          {\r\n            Update[\"sp\"] += 100;\r\n            Update[\"pp\"] -= 1;\r\n          }\r\n          else if(Update[\"cp\"] > 9)\r\n          {\r\n            Update[\"sp\"] += 1;\r\n            Update[\"cp\"] -= 10;\r\n          }else{\r\n            throw new Error(`Not enough money to do that.`);\r\n          }\r\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\r\n          break;\r\n        case \"ep\" :\r\n          if (Update[\"gp\"] > 0)\r\n          {\r\n            Update[\"ep\"] += 2;\r\n            Update[\"gp\"] -= 1;\r\n          }\r\n          else if(Update[\"pp\"] > 0)\r\n          {\r\n            Update[\"ep\"] += 20;\r\n            Update[\"pp\"] -= 1;\r\n          }\r\n          else if(Update[\"sp\"] > 4)\r\n          {\r\n            Update[\"ep\"] += 1;\r\n            Update[\"sp\"] -= 5;\r\n          }\r\n          else if(Update[\"cp\"] > 49)\r\n          {\r\n            Update[\"ep\"] += 1;\r\n            Update[\"cp\"] -= 50;\r\n          }else{\r\n            throw new Error(`Not enough money to do that.`);\r\n          }\r\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\r\n          break;\r\n        case \"gp\" :\r\n          if (Update[\"pp\"] > 0)\r\n          {\r\n            Update[\"gp\"] += 10;\r\n            Update[\"pp\"] -= 1;\r\n          }\r\n          else if(Update[\"ep\"] > 1)\r\n          {\r\n            Update[\"gp\"] += 1;\r\n            Update[\"ep\"] -= 2;\r\n          }\r\n          else if(Update[\"sp\"] > 9)\r\n          {\r\n            Update[\"gp\"] += 1;\r\n            Update[\"sp\"] -= 10;\r\n          }\r\n          else if(Update[\"cp\"] > 99)\r\n          {\r\n            Update[\"gp\"] += 1;\r\n            Update[\"cp\"] -= 100;\r\n          }else{\r\n            throw new Error(`Not enough money to do that.`);\r\n          }\r\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\r\n          break;\r\n        case \"pp\" :\r\n          if (Update[\"gp\"] > 9)\r\n          {\r\n            Update[\"pp\"] += 1;\r\n            Update[\"gp\"] -= 10;\r\n          }\r\n          else if(Update[\"ep\"] > 19)\r\n          {\r\n            Update[\"pp\"] += 1;\r\n            Update[\"ep\"] -= 20;\r\n          }\r\n          else if(Update[\"sp\"] > 99)\r\n          {\r\n            Update[\"pp\"] += 1;\r\n            Update[\"sp\"] -= 100;\r\n          }\r\n          else if(Update[\"cp\"] > 999)\r\n          {\r\n            Update[\"pp\"] += 1;\r\n            Update[\"cp\"] -= 1000;\r\n          }else{\r\n            throw new Error(`Not enough money to do that.`);\r\n          }\r\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\r\n      }\r\n    }\r\n  }\r\n  return Update;\r\n}\r\n\r\nfunction divideValue(Object, Value)\r\n{\r\n  if(Value === 1) return Object;\r\n  let remainder = 0;\r\n  let Update = {pp :0, gp:0, ep:0, sp :0, cp: 0};\r\n\r\n  for(let key in Object)\r\n  {\r\n    Update[key] = Object[key] + remainder;\r\n    remainder = Object[key]%Value;\r\n    if(Update[key] > 0) Update[key] = Math.floor(Update[key]/Value);\r\n    if(Update[key] < 0) Update[key] = Math.ceil(Update[key]/Value);\r\n    if(remainder !== 0)\r\n    {\r\n      if(key === \"ep\")\r\n      {remainder *= 5;}\r\n      else if (key === \"gp\")\r\n      {remainder *= 2;}\r\n      else\r\n      {remainder *= 10;}\r\n    }\r\n  }\r\n  console.log(`There was ${remainder/10} cp left over.`);\r\n  return Update;\r\n}\r\n\r\nfunction x(Original, edit_key)\r\n{\r\n  let Update = duplicate(Original);\r\n  for(let key in Update)\r\n  {\r\n    if(key === edit_key)\r\n    {\r\n\r\n    }\r\n  }\r\n}","author":"NeG597KOgANJAOdY","img":"markers/gold.png","actorIds":[],"_id":"Ifg8e2InZi7K9jfu"}
{"name":"ADD-Cub-Condition","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RpuEJrkUjZIDqVU2"}},"scope":"global","command":"let options = '';\ngame.cub.conditions.forEach((item) => {\n  options += `<option value=\"${item.name}\">\\n`;\n});\nlet content = `\n<form>\n  <div class=\"form-group\">\n    <label for=\"condition\">Condition:</label>\n    <input list=\"conditions\" id=\"condition\" name=\"condition\"/ autofocus>\n    <datalist id=\"conditions\">\n      ${options}\n    </datalist>\n  </div>\n</form>\n`\n\nnew Dialog({\n  title: `Select Condition`,\n  content: content,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply`,\n      callback: (html) => {\n        let condition = html.find('#condition').val();\n        if (!game.cub.conditions.some(el => el.name === condition)) {\n          return ui.notifications.info(\"Select a valid condition.\");\n        }\n\n        //apply the condition to selected tokens (0.6.6)\n        //game.cub.applyCondition(condition);\n\n    //apply the condition to the selected tokens (0.7.5)\n    game.cub.addCondition(condition);\n\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\"\n}).render(true);\n\n(async () => {\n  await new Promise(resolve => setTimeout(resolve, 20));\n  let input = $('#condition').focus();\n})();","author":"NeG597KOgANJAOdY","img":"markers/0%20add_effects%20-%20Copia.png","actorIds":[],"_id":"QJkSzoguIjTkAhWP"}
{"name":"Display Attribute Lists for Selected Actor","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.vIYlN91XcHeOY5KW"}},"scope":"global","command":"ShowActorAttributeData(actor);","author":"NeG597KOgANJAOdY","img":"icons/svg/book.svg","actorIds":[],"_id":"XCpYWe1J18bOKtAf"}
{"name":"REMOVE Effects","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Active/Passive Effects","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.SnRtyqW34JPBMHwG"}},"scope":"global","command":"game.cub.removeAllConditions()","author":"NeG597KOgANJAOdY","img":"markers/Effect_remove_CUB.png","actorIds":[],"_id":"XR7EuCYJCERBaPtu"}
{"name":"Add-TempHP","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.rl0SGMTuz0vHiWpC"}},"scope":"global","command":"//Add or subtract Temp HP. Will do math or rolls.\n//Preface with \"=\" to set to exactly that number\n/* Alt Use: */\n//Can be used wtihin entity link buttons. Anything but the first number is ignored.\n//\"->\" can be used to subtract the number of the next inline roll encountered\n//\"+>\" can be used to add the number of the next inline roll encountered\n//\"=>\" can be used to set to the number of the next inline roll encountered\n//Examples: (All are equivalent)\n//\t@Macro[Add Temp HP]{Add Temp HP ->}[[5+3]]\n//\t@Macro[Add Temp HP]{+8 THP}\n//\t@Macro[Add Temp HP]{Set to =>}[[@attributes.hp.temp + 3 + 5]]\n\nvar controlled = canvas.tokens.controlled.map(o => o.actor),\n\tinputText = false,\n\tchatMessage = game.messages.get(event.srcElement.closest('.message')?.getAttribute('data-message-id'));\nif (window.macroChain?.length || event.srcElement.nodeName == 'A')\n\tinputText = window.macroChain?.pop() || event.srcElement.textContent.trim();\n\nif (inputText) {\n\tif (inputText.indexOf('->') > -1)\n\t\tinputText = '-1 * (' + event.srcElement.nextElementSibling?.textContent.trim() + ')';\n\telse if (inputText.indexOf('+>') > -1)\n\t\tinputText = event.srcElement.nextElementSibling?.textContent.trim();\n\telse if (inputText.indexOf('=>') > -1)\n\t\tinputText = '=' + event.srcElement.nextElementSibling?.textContent.trim();\n\telse\n\t\tinputText = inputText.match(/([=-]?\\d)+/)?.[1];\n}\nif (!inputText) {\n\tlet d = new Dialog({\n\t\ttitle: 'How much Temp HP?',\n\t\tcontent: '<input name=\"temphp\" type=\"text\" class=\"temphp select-on-click\" placeholder=\"+Temp.\" title=\"Temporary Hit Points\" autofocus>',\n\t\tbuttons: {\n\t\t  ok: {\n\t\t\ticon: '',\n\t\t\tlabel: \"OK\",\n\t\t\tcallback: applyTHP\n\t\t  }\n\t\t},\n\t\tdefault: 'ok'\n\t  }, {width: 100});\n\tHooks.once('renderDialog', (a,inp) => inp[0].querySelector('input').focus());\n\td.render(true);\n}\nelse\n\tapplyTHP(null, inputText);\n\nfunction applyTHP(htm, fromButton=false) {\n\tcontrolled.forEach(selected => {\n\t\tlet change = 0, equal;\n\t\tif (fromButton || fromButton === '0')\n\t\t\tchange = fromButton;\n\t\telse\n\t\t\tchange = htm[0].querySelector('input').value;\n\t\tif (change.charAt(0) == '=') {\n\t\t\tequal = true;\n\t\t\tchange = change.slice(1);\n\t\t}\n\t\tlet parsed = parseInt((new Roll(change).roll()).total),\n\t\t\tdifference = Math.max(selected.data.data.attributes.hp.temp + parsed, 0);\n\t\tif (equal)\n\t\t\tselected.update({'data.attributes.hp.temp': parsed});\n\t\telse\n\t\t\tselected.update({'data.attributes.hp.temp': difference});\n\t});\n}","author":"NeG597KOgANJAOdY","img":"markers/add_temp_hp.png","actorIds":[],"_id":"ZfLyulscURtUMFcW"}
{"name":"FX- Delete filters on Selected","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"00 - A - Delete filters on Selected","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.k3nJVdOcsbMDVnrb"}},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"NeG597KOgANJAOdY","img":"markers/FX-Clear.png","actorIds":[],"_id":"bxe1xvYgU84HlZ7x"}
{"name":"Change Token Vision","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Change Token Vision ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.yLoutC95PjwpImHm"}},"scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\r\n// This macro was written by @Sky#9453\r\n// https://github.com/Sky-Captain-13/foundry\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  return ui.notifications.error(\"Please select a token first\");\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"NeG597KOgANJAOdY","img":"markers/vision.jpg","actorIds":[],"_id":"fXqQlgD5WTgRXs7g"}
{"name":"Show_DAE_Effect","permission":{"default":0,"NeG597KOgANJAOdY":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zTEAaKrJTPbu5feQ"}},"scope":"global","command":"new DAE.ActiveEffects(actor, {}).render(true)","author":"NeG597KOgANJAOdY","img":"markers/Effect_DAE_Show.png","actorIds":[],"_id":"tqM5oiKtHH1aQpwq"}
{"$$deleted":true,"_id":"QJkSzoguIjTkAhWP"}
{"$$deleted":true,"_id":"ZfLyulscURtUMFcW"}
{"$$deleted":true,"_id":"fXqQlgD5WTgRXs7g"}
{"$$deleted":true,"_id":"bxe1xvYgU84HlZ7x"}
{"$$deleted":true,"_id":"Ifg8e2InZi7K9jfu"}
{"$$deleted":true,"_id":"XR7EuCYJCERBaPtu"}
{"$$deleted":true,"_id":"3HCaquhj21WWBfXN"}
{"$$deleted":true,"_id":"tqM5oiKtHH1aQpwq"}
{"$$deleted":true,"_id":"EztKuOtSqF26ONmB"}
{"name":"ADD-Cub-Condition","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.RpuEJrkUjZIDqVU2"}},"scope":"global","command":"let options = '';\ngame.cub.conditions.forEach((item) => {\n  options += `<option value=\"${item.name}\">\\n`;\n});\nlet content = `\n<form>\n  <div class=\"form-group\">\n    <label for=\"condition\">Condition:</label>\n    <input list=\"conditions\" id=\"condition\" name=\"condition\"/ autofocus>\n    <datalist id=\"conditions\">\n      ${options}\n    </datalist>\n  </div>\n</form>\n`\n\nnew Dialog({\n  title: `Select Condition`,\n  content: content,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply`,\n      callback: (html) => {\n        let condition = html.find('#condition').val();\n        if (!game.cub.conditions.some(el => el.name === condition)) {\n          return ui.notifications.info(\"Select a valid condition.\");\n        }\n\n        //apply the condition to selected tokens (0.6.6)\n        //game.cub.applyCondition(condition);\n\n    //apply the condition to the selected tokens (0.7.5)\n    game.cub.addCondition(condition);\n\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel`\n    },\n  },\n  default: \"yes\"\n}).render(true);\n\n(async () => {\n  await new Promise(resolve => setTimeout(resolve, 20));\n  let input = $('#condition').focus();\n})();","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/0%20add_effects%20-%20Copia.png","actorIds":[],"_id":"Ru5ktRnPyz60nsxm"}
{"name":"Add-TempHP","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.rl0SGMTuz0vHiWpC"}},"scope":"global","command":"//Add or subtract Temp HP. Will do math or rolls.\n//Preface with \"=\" to set to exactly that number\n/* Alt Use: */\n//Can be used wtihin entity link buttons. Anything but the first number is ignored.\n//\"->\" can be used to subtract the number of the next inline roll encountered\n//\"+>\" can be used to add the number of the next inline roll encountered\n//\"=>\" can be used to set to the number of the next inline roll encountered\n//Examples: (All are equivalent)\n//\t@Macro[Add Temp HP]{Add Temp HP ->}[[5+3]]\n//\t@Macro[Add Temp HP]{+8 THP}\n//\t@Macro[Add Temp HP]{Set to =>}[[@attributes.hp.temp + 3 + 5]]\n\nvar controlled = canvas.tokens.controlled.map(o => o.actor),\n\tinputText = false,\n\tchatMessage = game.messages.get(event.srcElement.closest('.message')?.getAttribute('data-message-id'));\nif (window.macroChain?.length || event.srcElement.nodeName == 'A')\n\tinputText = window.macroChain?.pop() || event.srcElement.textContent.trim();\n\nif (inputText) {\n\tif (inputText.indexOf('->') > -1)\n\t\tinputText = '-1 * (' + event.srcElement.nextElementSibling?.textContent.trim() + ')';\n\telse if (inputText.indexOf('+>') > -1)\n\t\tinputText = event.srcElement.nextElementSibling?.textContent.trim();\n\telse if (inputText.indexOf('=>') > -1)\n\t\tinputText = '=' + event.srcElement.nextElementSibling?.textContent.trim();\n\telse\n\t\tinputText = inputText.match(/([=-]?\\d)+/)?.[1];\n}\nif (!inputText) {\n\tlet d = new Dialog({\n\t\ttitle: 'How much Temp HP?',\n\t\tcontent: '<input name=\"temphp\" type=\"text\" class=\"temphp select-on-click\" placeholder=\"+Temp.\" title=\"Temporary Hit Points\" autofocus>',\n\t\tbuttons: {\n\t\t  ok: {\n\t\t\ticon: '',\n\t\t\tlabel: \"OK\",\n\t\t\tcallback: applyTHP\n\t\t  }\n\t\t},\n\t\tdefault: 'ok'\n\t  }, {width: 100});\n\tHooks.once('renderDialog', (a,inp) => inp[0].querySelector('input').focus());\n\td.render(true);\n}\nelse\n\tapplyTHP(null, inputText);\n\nfunction applyTHP(htm, fromButton=false) {\n\tcontrolled.forEach(selected => {\n\t\tlet change = 0, equal;\n\t\tif (fromButton || fromButton === '0')\n\t\t\tchange = fromButton;\n\t\telse\n\t\t\tchange = htm[0].querySelector('input').value;\n\t\tif (change.charAt(0) == '=') {\n\t\t\tequal = true;\n\t\t\tchange = change.slice(1);\n\t\t}\n\t\tlet parsed = parseInt((new Roll(change).roll()).total),\n\t\t\tdifference = Math.max(selected.data.data.attributes.hp.temp + parsed, 0);\n\t\tif (equal)\n\t\t\tselected.update({'data.attributes.hp.temp': parsed});\n\t\telse\n\t\t\tselected.update({'data.attributes.hp.temp': difference});\n\t});\n}","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/add_temp_hp.png","actorIds":[],"_id":"r4wbqk6YgFKhPrsS"}
{"name":"Change Token Vision","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Change Token Vision ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.yLoutC95PjwpImHm"}},"scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\n// This macro was written by @Sky#9453\n// https://github.com/Sky-Captain-13/foundry\n\nif (canvas.tokens.controlled.length === 0)\n  return ui.notifications.error(\"Please select a token first\");\n\nlet applyChanges = false;\nnew Dialog({\n  title: `Token Vision Configuration`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision Type:</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"dim0\">Self</option>\n          <option value=\"dim30\">Darkvision (30 ft)</option>\n          <option value=\"dim60\">Darkvision (60 ft)</option>\n          <option value=\"dim90\">Darkvision (90 ft)</option>\n          <option value=\"dim120\">Darkvision (120 ft)</option>\n          <option value=\"dim150\">Darkvision (150 ft)</option>\n          <option value=\"dim180\">Darkvision (180 ft)</option>\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Light Source:</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"none\">None</option>\n          <option value=\"candle\">Candle</option>\n          <option value=\"lamp\">Lamp</option>\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\n          <option value=\"light\">Light (Cantrip)</option>\n          <option value=\"torch\">Torch</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let dimSight = 0;\n        let brightSight = 0;\n        let dimLight = 0;\n        let brightLight = 0;\n        let lightAngle = 360;\n        let lockRotation = token.data.lockRotation;\n        // Get Vision Type Values\n        switch (visionType) {\n          case \"dim0\":\n            dimSight = 0;\n            brightSight = 0;\n            break;\n          case \"dim30\":\n            dimSight = 30;\n            brightSight = 0;\n            break;\n          case \"dim60\":\n            dimSight = 60;\n            brightSight = 0;\n            break;\n          case \"dim90\":\n            dimSight = 90;\n            brightSight = 0;\n            break;\n          case \"dim120\":\n            dimSight = 120;\n            brightSight = 0;\n            break;\n          case \"dim150\":\n            dimSight = 150;\n            brightSight = 0;\n            break;\n          case \"dim180\":\n            dimSight = 180;\n            brightSight = 0;\n            break;\n          case \"bright120\":\n            dimSight = 0;\n            brightSight= 120;\n            break;\n          case \"nochange\":\n          default:\n            dimSight = token.data.dimSight;\n            brightSight = token.data.brightSight;\n        }\n        // Get Light Source Values\n        switch (lightSource) {\n          case \"none\":\n            dimLight = 0;\n            brightLight = 0;\n            break;\n          case \"candle\":\n            dimLight = 10;\n            brightLight = 5;\n            break;\n          case \"lamp\":\n            dimLight = 45;\n            brightLight = 15;\n            break;\n          case \"bullseye\":\n            dimLight = 120;\n            brightLight = 60;\n            lockRotation = false;\n            lightAngle = 52.5;\n            break;\n          case \"hooded-dim\":\n            dimLight = 5;\n            brightLight = 0;\n            break;\n          case \"hooded-bright\":\n            dimLight = 60;\n            brightLight = 30;\n            break;\n          case \"light\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"torch\":\n            dimLight = 40;\n            brightLight = 20;\n            break;\n          case \"nochange\":\n          default:\n            dimLight = token.data.dimLight;\n            brightLight = token.data.brightLight;\n            lightAngle = token.data.lightAngle;\n            lockRotation = token.data.lockRotation;\n        }\n        // Update Token\n        console.log(token);\n        token.update({\n          vision: true,\n          dimSight: dimSight,\n          brightSight: brightSight,\n          dimLight: dimLight,\n          brightLight:  brightLight,\n          lightAngle: lightAngle,\n          lockRotation: lockRotation\n        });\n      }\n    }\n  }\n}).render(true);","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/vision.jpg","actorIds":[],"_id":"2PaqqaxjFAGmHtCG"}
{"name":"FX- Delete filters on Selected","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"00 - A - Delete filters on Selected","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.k3nJVdOcsbMDVnrb"}},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\nTokenMagic.deleteFiltersOnSelected();","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/filter_delete.png","actorIds":[],"_id":"ncziV2PK1rIupbC6"}
{"name":"Gold_Changer","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.9ueMmrsGlKkx6kV8"}},"scope":"global","command":"//Money Give/Remover -> target necessary\n\n(()=>{\n\tlet targets = game.user.targets;\n\n\tlet targets_content =``;\n\n\tfor(let target of targets)\n\t{\n\t\ttargets_content += `<img src=${target.data.img} width=\"50\" height=\"50\">`\n\t}\n\n\tlet dialog_content = `\n\t<p></p>\n\t${targets_content}\n\t<div class = \"form-group\">\n\t\t<label for=\"pp\">Platnium<label>\n\t\t<input name=\"pp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\n\t\t<label for=\"gp\">Gold    <label>\n\t\t<input name=\"gp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\n\t\t<label for=\"ep\">Electrum<label>\n\t\t<input name=\"ep\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\n\t\t<label for=\"sp\">Silver  <label>\n\t\t<input name=\"sp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\n\t\t<label for=\"cp\">Copper  <label>\n\t\t<input name=\"cp\" type =\"number\" value=\"0\" min=\"-999\" max=\"999\"><br>\n\t</div>`;\n\n\tnew Dialog({\n\t\tcontent : dialog_content,\n\t\tbuttons : \n\t\t{\n\t\t\tOk : {icon : ``, label : `Change Money.`, callback : (html) => changeMoney(targets,html)}\n\t\t}\n\t}).render(true);\n})();\n\nasync function changeMoney(targets,html)\n{\n\tlet difference_money = {\n\t\tpp : parseInt(html.find('[name=pp]')[0].value),\n\t\tgp : parseInt(html.find('[name=gp]')[0].value),\n\t\tep : parseInt(html.find('[name=ep]')[0].value),\n\t\tsp : parseInt(html.find('[name=sp]')[0].value),\n\t\tcp : parseInt(html.find('[name=cp]')[0].value)\n\t}\n\n  //console.log(targets,update_money);\n  \n  //divide update_money based on # of targets\n  difference_money = divideValue(difference_money, targets.size);\n\n  console.log(difference_money);\n\n\tfor(let target of targets)\n\t{\n    let original_money = duplicate(target.actor.data.data.currency);\n    let update_money = changeValue(original_money,difference_money);    \n\n    console.log(target.actor.name)\n    console.log(original_money)\n    console.log(difference_money)\n    console.log(update_money);\n\n    await target.actor.update({\"data.currency\" : update_money});\n\t}\n}\n\nfunction changeValue(Original, Difference)\n{\n  let Update = {pp :0, gp:0, ep:0, sp :0, cp: 0};\n\n  for(let key in Original)\n  {\n    Update[key] = Original[key] + Difference[key];\n    if(Update[key] < 0)\n    {\n      switch(key)\n      {\n        case \"cp\" :\n          if (Update[\"sp\"] > 0)\n          {\n            Update[\"cp\"] += 10;\n            Update[\"sp\"] -= 1;\n          }\n          else if(Update[\"ep\"] > 0)\n          {\n            Update[\"cp\"] += 50;\n            Update[\"ep\"] -= 1;\n          }\n          else if(Update[\"gp\"] > 0)\n          {\n            Update[\"cp\"] += 100;\n            Update[\"gp\"] -= 1;\n          }\n          else if(Update[\"pp\"] > 0)\n          {\n            Update[\"cp\"] += 1000;\n            Update[\"pp\"] -= 1;\n          }else{\n            throw new Error(`Not enough money to do that.`);\n          }\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\n          break;\n        case \"sp\" :\n          if (Update[\"ep\"] > 0)\n          {\n            Update[\"sp\"] += 5;\n            Update[\"ep\"] -= 1;\n          }\n          else if(Update[\"gp\"] > 0)\n          {\n            Update[\"sp\"] += 10;\n            Update[\"gp\"] -= 1;\n          }\n          else if(Update[\"pp\"] > 0)\n          {\n            Update[\"sp\"] += 100;\n            Update[\"pp\"] -= 1;\n          }\n          else if(Update[\"cp\"] > 9)\n          {\n            Update[\"sp\"] += 1;\n            Update[\"cp\"] -= 10;\n          }else{\n            throw new Error(`Not enough money to do that.`);\n          }\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\n          break;\n        case \"ep\" :\n          if (Update[\"gp\"] > 0)\n          {\n            Update[\"ep\"] += 2;\n            Update[\"gp\"] -= 1;\n          }\n          else if(Update[\"pp\"] > 0)\n          {\n            Update[\"ep\"] += 20;\n            Update[\"pp\"] -= 1;\n          }\n          else if(Update[\"sp\"] > 4)\n          {\n            Update[\"ep\"] += 1;\n            Update[\"sp\"] -= 5;\n          }\n          else if(Update[\"cp\"] > 49)\n          {\n            Update[\"ep\"] += 1;\n            Update[\"cp\"] -= 50;\n          }else{\n            throw new Error(`Not enough money to do that.`);\n          }\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\n          break;\n        case \"gp\" :\n          if (Update[\"pp\"] > 0)\n          {\n            Update[\"gp\"] += 10;\n            Update[\"pp\"] -= 1;\n          }\n          else if(Update[\"ep\"] > 1)\n          {\n            Update[\"gp\"] += 1;\n            Update[\"ep\"] -= 2;\n          }\n          else if(Update[\"sp\"] > 9)\n          {\n            Update[\"gp\"] += 1;\n            Update[\"sp\"] -= 10;\n          }\n          else if(Update[\"cp\"] > 99)\n          {\n            Update[\"gp\"] += 1;\n            Update[\"cp\"] -= 100;\n          }else{\n            throw new Error(`Not enough money to do that.`);\n          }\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\n          break;\n        case \"pp\" :\n          if (Update[\"gp\"] > 9)\n          {\n            Update[\"pp\"] += 1;\n            Update[\"gp\"] -= 10;\n          }\n          else if(Update[\"ep\"] > 19)\n          {\n            Update[\"pp\"] += 1;\n            Update[\"ep\"] -= 20;\n          }\n          else if(Update[\"sp\"] > 99)\n          {\n            Update[\"pp\"] += 1;\n            Update[\"sp\"] -= 100;\n          }\n          else if(Update[\"cp\"] > 999)\n          {\n            Update[\"pp\"] += 1;\n            Update[\"cp\"] -= 1000;\n          }else{\n            throw new Error(`Not enough money to do that.`);\n          }\n          Update = changeValue(Update, {pp :0, gp:0, ep:0, sp :0, cp: 0});\n      }\n    }\n  }\n  return Update;\n}\n\nfunction divideValue(Object, Value)\n{\n  if(Value === 1) return Object;\n  let remainder = 0;\n  let Update = {pp :0, gp:0, ep:0, sp :0, cp: 0};\n\n  for(let key in Object)\n  {\n    Update[key] = Object[key] + remainder;\n    remainder = Object[key]%Value;\n    if(Update[key] > 0) Update[key] = Math.floor(Update[key]/Value);\n    if(Update[key] < 0) Update[key] = Math.ceil(Update[key]/Value);\n    if(remainder !== 0)\n    {\n      if(key === \"ep\")\n      {remainder *= 5;}\n      else if (key === \"gp\")\n      {remainder *= 2;}\n      else\n      {remainder *= 10;}\n    }\n  }\n  console.log(`There was ${remainder/10} cp left over.`);\n  return Update;\n}\n\nfunction x(Original, edit_key)\n{\n  let Update = duplicate(Original);\n  for(let key in Update)\n  {\n    if(key === edit_key)\n    {\n\n    }\n  }\n}","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/gold.png","actorIds":[],"_id":"E4errsrb19mXoeL9"}
{"name":"REMOVE CUB Effects","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Show Active/Passive Effects","colour":"#ff0000","trigger":""}},"core":{"sourceId":"Macro.SnRtyqW34JPBMHwG"}},"scope":"global","command":"game.cub.removeAllConditions()","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/Effect_remove_CUB.png","actorIds":[],"_id":"tcfLoUc51K9ewxC3"}
{"name":"Set Token bars and nameplate","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Set Token bars and nameplate ","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.iOX5h0jIxJI0VTdW"}},"scope":"global","command":"/* This will set every token in scene to always display their\n * token bars and nameplate, and sets the first bar to represent \n * HP and removes the second token bar.\n*/\n\nconst tokens =canvas.tokens.placeables.map(token => {\n   return {\n       _id: token.id,\n       \"bar1.attribute\": \"attributes.hp\",\n       \"bar2.attribute\": \"\",\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\n   };\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/Token_bar-Names.png","actorIds":[],"_id":"Mhu8fbpc7bL8hYJN"}
{"name":"Show_DAE_Effect","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.zTEAaKrJTPbu5feQ"}},"scope":"global","command":"new DAE.ActiveEffects(actor, {}).render(true)","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/Show_effects.png","actorIds":[],"_id":"h02h04Tf54HVf3WH"}
{"name":"Stealth Check","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"Stealth Check","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.RTiO1Z1tasafiWAo"}},"scope":"global","command":"// Grabs selected tokens and rolls a stealth check against all other tokens passive perception on the map. Then returns the result.\n\n// getting all actors of selected tokens\nlet actors = canvas.tokens.controlled.map(({ actor }) => actor);\n\n// if there are no selected tokens, roll for the player's character.\nif (actors.length < 1) {\n  actors = game.users.entities.map(entity => {\n    if (entity.active && entity.character !== null) {\n      return entity.character;\n    }\n  });\n}\nconst validActors = actors.filter(actor => actor != null);\n\nlet messageContent = 'pp = passive perception<br>';\n\n// roll for every actor\nfor (const selectedActor of validActors) {\n  const stealthMod = selectedActor.data.data.skills.ste.total; // stealth roll\n  const stealth = new Roll(`1d20+${stealthMod}`).roll().total; // rolling the formula\n  messageContent += `<hr><h3>${selectedActor.name} stealth roll was a <b>${stealth}</b>.</h3>`; // creating the output string\n\n  // grab a list of unique tokens then check their passive perception against the rolled stealth.\n  const uniqueActor = {};\n  const caughtBy = canvas.tokens.placeables\n    .filter(token => !!token.actor)\n    .filter(({ actor }) => { // filter out duplicate token names. ie: we assume all goblins have the same passive perception\n      if (uniqueActor[actor.name]) {\n        return false;\n      }\n      uniqueActor[actor.name] = true;\n      return true;\n    })\n    .filter(({ actor }) => {\n      return selectedActor.id !== actor.id; // Don't check to see if the token sees himself.\n    })\n    .filter(({ actor }) => actor.data.data.skills.prc.passive >= stealth); // check map tokens passives with roller stealth\n\n  if (!caughtBy.length) {\n    messageContent += 'Stealth successful!<br>';\n  } else {\n    messageContent += 'Stealth questionable:<br>';\n    caughtBy.map(({ actor }) => {\n      messageContent += `<b>${actor.name}</b> pp(${actor.data.data.skills.prc.passive}).<br>`;\n    });\n  }\n}\n\n// create the message\nconst chatData = {\n  user: game.user._id,\n  speaker: game.user,\n  content: messageContent,\n  whisper: game.users.entities.filter((u) => u.isGM).map((u) => u._id),\n};\nChatMessage.create(chatData, {});","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/StealthCheck.jpg","actorIds":[],"_id":"bjOlsOzn1A1qew1b"}
{"name":"Dodge-action","permission":{"default":0,"z3axZ8yAkgVHJACm":3},"type":"script","flags":{"macro-marker":{"activeData":{"icon":"icons/svg/dice-target.svg","tooltip":"New Macro","colour":"#ff0000","trigger":""}},"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Tnx74XaZaMyuJXT0"}},"scope":"global","command":"// requer uma condition CUB chamada Dodge com as flags adicionadas.\nif(!game.cub.hasCondition(\"Dodge\")) return game.cub.addCondition(\"Dodge\");\ngame.cub.removeCondition(\"Dodge\");","author":"z3axZ8yAkgVHJACm","img":"modules/GMmacros/img/defensive-stance.jpg","actorIds":[],"_id":"2TUf1B0EnTrTczVn"}
